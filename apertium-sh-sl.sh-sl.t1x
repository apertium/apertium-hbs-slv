<?xml version="1.0" encoding="utf-8"?>
<transfer default="chunk">

  <section-def-cats>
    <def-cat n="nom">
      <cat-item tags="n.*"/>
    </def-cat>
    <def-cat n="nom_gen">
      <cat-item tags="n.*.*.gen"/>
      <cat-item tags="n.*.*.gen.*"/>
    </def-cat>
    <def-cat n="nom_ins">
      <cat-item tags="n.*.*.ins"/>
      <cat-item tags="n.*.*.ins.*"/>
    </def-cat>
    <def-cat n="nom_loc">
      <cat-item tags="n.*.*.loc"/>
      <cat-item tags="n.*.*.loc.*"/>
    </def-cat>
    <def-cat n="nom_or_np">
      <cat-item tags="n.*"/>
      <cat-item tags="np.*"/>
    </def-cat>
    <def-cat n="np">
      <cat-item tags="np.*"/>
    </def-cat>
    <def-cat n="np_nom">
      <cat-item tags="np.*.*.*.nom"/>
    </def-cat>
    <def-cat n="np_nom_non_cog_ant">
      <cat-item tags="np.top.*.*.nom"/>
      <cat-item tags="np.al.*.*.nom"/>
    </def-cat>
    <def-cat n="np_gen">
      <cat-item tags="np.*.*.*.gen"/>
    </def-cat>
    <def-cat n="np_ins">
      <cat-item tags="np.*.*.*.ins"/>
    </def-cat>
    <def-cat n="np_loc">
      <cat-item tags="np.*.*.*.loc"/>
    </def-cat>
    <def-cat n="vb_lp">
      <cat-item tags="vbser.lp.*"/>
      <cat-item tags="vblex.*.*.lp.*"/>
      <cat-item tags="vbhaver.*.*.lp.*"/>
      <cat-item tags="vbmod.lp.*"/>
    </def-cat>
    <def-cat n="vbser_lp">
      <cat-item tags="vbser.lp.*"/>
    </def-cat>
    <def-cat n="vbser_past">
      <cat-item tags="vbser.clt.pres.*"/>
      <cat-item tags="vbser.pres.*"/>
    </def-cat>
    <def-cat n="vbser_past_clt">
      <cat-item tags="vbser.clt.*"/>
    </def-cat>
    <def-cat n="vbser_past_emph">
      <cat-item tags="vbser.pres.*"/>
    </def-cat>
    <def-cat n="vbser_cond">
      <cat-item tags="vbser.clt.aor.*"/>
    </def-cat>
    <def-cat n="verb">
      <cat-item tags="vblex.*"/>
      <cat-item tags="vbser.*"/>
      <cat-item tags="vbmod.*"/>
      <cat-item tags="vbhaver.*"/>
    </def-cat>
    <def-cat n="vbmod">
      <cat-item tags="vbmod.*"/>
    </def-cat>
    <def-cat n="vbhaver">
      <cat-item tags="vbhaver.*"/>
    </def-cat>
    <def-cat n="vblex">
      <cat-item tags="vblex.*"/>
    </def-cat>
    <def-cat n="vblex_ref">
      <cat-item tags="vblex.*.ref.*"/>
    </def-cat>
    <def-cat n="vbser">
      <cat-item tags="vbser.*"/>
    </def-cat>
    <def-cat n="vbpp">
      <cat-item tags="vblex.*.*.pp.*"/>
    </def-cat>
    <def-cat n="vbinf">
      <cat-item tags="vblex.*.*.inf"/>
      <cat-item tags="vblex.*.*.inf.*"/>
      <cat-item tags="vbmod.inf"/>
      <cat-item tags="vbmod.inf.*"/>
      <cat-item tags="vbhaver.*.*.inf"/>
      <cat-item tags="vbhaver.*.*.inf.*"/>
      <cat-item tags="vbser.inf"/>
      <cat-item tags="vbser.inf.*"/>
    </def-cat>
    <def-cat n="vbfutI">
      <cat-item lemma="htjeti" tags="vbmod.clt.futI.*"/>
    </def-cat>
    <def-cat n="vbhtjeti">
      <cat-item lemma="htjeti" tags="vbmod.pres.*"/>
      <cat-item lemma="htjeti" tags="vbmod.pii.*"/>
    </def-cat>
    <def-cat n="prns"><!--All pronouns-->
      <cat-item tags="prn"/>
      <cat-item tags="prn.*"/>
    </def-cat>
    <def-cat n="prn"><!--Not demonstrative, and not reflexive possesive se-->
      <cat-item tags="prn.pers.*"/>
      <cat-item tags="prn.pos.*"/>
      <cat-item tags="prn.ref.pos.*"/>
      <cat-item tags="prn.itg"/>
      <cat-item tags="prn.itg.*"/>
      <cat-item tags="prn.rel"/>
      <cat-item tags="prn.rel.*"/>
      <cat-item tags="prn.ind"/>
      <cat-item tags="prn.ind.*"/>
      <cat-item tags="prn.neg"/>
      <cat-item tags="prn.neg.*"/>
      <cat-item tags="prn.tot"/>
      <cat-item tags="prn.tot.*"/>
    </def-cat>
    <def-cat n="prn_rel">
      <cat-item tags="prn.rel.*"/>
    </def-cat>
    <def-cat n="prn_tot">
      <cat-item tags="prn.tot"/>
      <cat-item tags="prn.tot.*"/>
    </def-cat>
    <def-cat n="prn_dem">
      <cat-item tags="prn.dem.*"/>
    </def-cat>
    <def-cat n="prn_ref_pers">
      <cat-item tags="prn.ref.pers.*"/>
    </def-cat>
    <def-cat n="rel_prn">
      <cat-item tags="prn.rel.*"/>
    </def-cat>
    <def-cat n="num">
      <cat-item tags="num"/>
      <cat-item tags="num.*"/>
    </def-cat>
    <def-cat n="ord">
      <cat-item tags="num.ord.*"/>
    </def-cat>
    <def-cat n="adv">
      <cat-item tags="adv"/>
      <cat-item tags="adv.*"/>
    </def-cat>
    <def-cat n="adj_ADV">
      <cat-item tags="adj.pst.*.sg.acc.*"/>
    </def-cat>
    <def-cat n="adj">
      <cat-item tags="adj.*"/>
    </def-cat>
    <def-cat n="adj_pst">
      <cat-item tags="adj.pst.*"/>
    </def-cat>
    <def-cat n="adj_pss_sfx">
      <cat-item lemma="pos" tags="adj.*"/>
    </def-cat>
    <def-cat n="adj_comp">
      <cat-item tags="adj.comp.*"/>
    </def-cat>
    <def-cat n="adj_sup">
      <cat-item tags="adj.sup.*"/>
    </def-cat>
    <def-cat n="adj_ssup">
      <cat-item tags="adj.ssup.*"/>
    </def-cat>
    <def-cat n="adj_gen">
      <cat-item tags="adj.*.*.*.gen.*"/>
    </def-cat>
    <def-cat n="adj_ins">
      <cat-item tags="adj.*.*.*.ins.*"/>
    </def-cat>
    <def-cat n="pr">
      <cat-item tags="pr"/>
      <cat-item tags="pr.*"/>
    </def-cat>
    <def-cat n="det">
      <cat-item tags="det"/>
      <cat-item tags="det.*"/>
    </def-cat>
    <def-cat n="cnj">
      <cat-item tags="cnjcoo"/>
      <cat-item tags="cnjsub"/>
      <cat-item tags="cnjadv"/>
    </def-cat>
    <def-cat n="exp">
      <cat-item tags="part.exp"/>
    </def-cat>
    <def-cat n="ne_part">
      <cat-item lemma ="ne" tags="part.neg"/>
    </def-cat>
    <def-cat n="li_part">
      <cat-item lemma ="li" tags="part.itg"/>
    </def-cat>
    <def-cat n="i_cnjcoo">
      <cat-item lemma ="i" tags="cnjcoo"/>
    </def-cat>
    <def-cat n="kako_adv">
      <cat-item lemma="kako" tags="adv"/>
      <cat-item lemma="kako" tags="cnjsub"/>
    </def-cat>
    <def-cat n="vblex_lp">
      <cat-item tags="vblex.*.*.lp.*"/>
      <cat-item tags="vbhaver.*.*.lp.*"/>
      <cat-item tags="vbmod.lp.*"/>
    </def-cat>
    <def-cat n="clitic">
      <cat-item lemma="clitic" tags="prn.*"/>
    </def-cat>
    <def-cat n="biti">
      <cat-item lemma="biti" tags="vbser.*"/>
      <cat-item lemma="biti" tags="vblex.*"/>
      <cat-item lemma="biti" tags="vbmod.*"/>
    </def-cat>
    <def-cat n="biti_vbser">
      <cat-item lemma="biti" tags="vbser.*"/>
    </def-cat>
    <def-cat n="imati_vbhaver">
      <cat-item lemma="imati" tags="vbhaver.*"/>
    </def-cat>
    <def-cat n="biti_clt">
      <cat-item lemma="biti" tags="vbser.clt.*"/>
    </def-cat>
    <def-cat n="moći">
      <cat-item lemma="moći" tags="vbser.*"/>
      <cat-item lemma="moći" tags="vblex.*"/>
      <cat-item lemma="moći" tags="vbmod.*"/>
    </def-cat>
    <def-cat n="cm">
      <cat-item lemma="," tags="cm"/>
    </def-cat>
    <def-cat n="vblex_imperf_adv">
      <cat-item tags="vblex.imperf.*.pprs.adv"/>
    </def-cat>
    <def-cat n="vblex_perf_adv">
      <cat-item tags="vblex.perf.*.pprs.adv"/>
    </def-cat>

  </section-def-cats>

  <section-def-attrs>
    <def-attr n="a_nom">
      <attr-item tags="n"/>
      <attr-item tags="np"/>
      <attr-item tags="np.ant"/>
      <attr-item tags="np.top"/>
      <attr-item tags="np.cog"/>
      <attr-item tags="np.al"/>
    </def-attr>

    <def-attr n="a_num">
      <attr-item tags="num"/>
      <attr-item tags="num.ord"/>
    </def-attr>

    <def-attr n="a_prp">
      <attr-item tags="pr"/>
    </def-attr>

    <def-attr n="a_adj">
      <attr-item tags="adj"/>
      <attr-item tags="adj.itg"/>
    </def-attr>

    <def-attr n="a_vrb">
      <attr-item tags="vblex"/>
      <attr-item tags="vbhaver"/>
      <attr-item tags="vbser"/>
      <attr-item tags="vbser.clt"/>
      <attr-item tags="vbmod"/>
    </def-attr>

    <def-attr n="a_adv">
      <attr-item tags="adv"/>
    </def-attr>

    <def-attr n="a_det">
      <attr-item tags="det"/>
    </def-attr>

    <def-attr n="a_part">
      <attr-item tags="part"/>
    </def-attr>

    <def-attr n="a_cnj">
      <attr-item tags="cnjcoo"/>
      <attr-item tags="cnjsub"/>
      <attr-item tags="cnjadv"/>
    </def-attr>

    <def-attr n="a_adv_form_SH">
      <attr-item tags="comp"/>
      <attr-item tags="sup"/>
      <attr-item tags="ssup"/>
    </def-attr>

    <def-attr n="a_adv_form">
      <attr-item tags="sint"/>
      <attr-item tags="sint.comp"/>
      <attr-item tags="sint.sup"/>
      <attr-item tags="sint.ela"/>
    </def-attr>

    <def-attr n="a_deg">
      <attr-item tags="pst"/>
      <attr-item tags="comp"/>
      <attr-item tags="sup"/>
      <attr-item tags="ssup"/>
    </def-attr>

    <def-attr n="a_prn">
      <attr-item tags="prn"/>
      <attr-item tags="prn.neg"/>
      <attr-item tags="prn.pos"/>
      <attr-item tags="prn.ind"/>
      <attr-item tags="prn.ind.neg"/>
      <attr-item tags="prn.itg"/>
      <attr-item tags="prn.dem"/>
      <attr-item tags="prn.pers"/>
      <attr-item tags="prn.pers.clt"/>
      <attr-item tags="prn.tot"/>
      <attr-item tags="prn.ref.pers"/>
      <attr-item tags="prn.ref.pos"/>
      <attr-item tags="prn.rel"/>
    </def-attr>

    <def-attr n="trn">
      <attr-item tags="tv"/>
      <attr-item tags="iv"/>
      <attr-item tags="ref"/>
    </def-attr>

    <def-attr n="asp">
      <attr-item tags="perf"/>
      <attr-item tags="imperf"/>
    </def-attr>

    <def-attr n="tns">
      <attr-item tags="inf"/>
      <attr-item tags="pres"/>
      <attr-item tags="lp"/>
      <attr-item tags="lp.aor"/>
      <attr-item tags="lp.pii"/>
      <attr-item tags="opt"/>
      <attr-item tags="imp"/>
      <attr-item tags="aor"/>
      <attr-item tags="pii"/>
      <attr-item tags="pprs"/>
      <attr-item tags="clt.futI"/>
      <attr-item tags="fut"/>
      <attr-item tags="futI"/>
      <attr-item tags="futII"/>
      <attr-item tags="fti"/>
      <attr-item tags="past"/>
      <attr-item tags="pp"/>
      <attr-item tags="ref.lp"/>
    </def-attr>

    <def-attr n="gen">
      <attr-item tags="mi"/>
      <attr-item tags="ma"/>
      <attr-item tags="m"/>
      <attr-item tags="f"/>
      <attr-item tags="nt"/>
      <attr-item tags="mfn"/>
      <attr-item tags="mf"/>
    </def-attr>

    <def-attr n="prs">
      <attr-item tags="p1"/>
      <attr-item tags="p2"/>
      <attr-item tags="p3"/>
    </def-attr>

    <def-attr n="nbr">
      <attr-item tags="sg"/>
      <attr-item tags="pl"/>
      <attr-item tags="sp"/>
    </def-attr>

    <def-attr n="cas">
      <attr-item tags="nom"/>
      <attr-item tags="acc"/>
      <attr-item tags="dat"/>
      <attr-item tags="gen"/>
      <attr-item tags="loc"/>
      <attr-item tags="ins"/>
      <attr-item tags="voc"/>
    </def-attr>

    <def-attr n="def">
      <attr-item tags="ind"/>
      <attr-item tags="def"/>
      <attr-item tags="dst"/>
      <attr-item tags="prx"/>
    </def-attr>

    <def-attr n="fnc">
      <attr-item tags="@N←"/>
      <attr-item tags="@N→"/>
      <attr-item tags="@A←"/>
      <attr-item tags="@Adv←"/>
    </def-attr>

    <def-attr n="a_adv_addWord">
      <attr-item tags="add_comp"/>
      <attr-item tags="add_sup"/>
      <attr-item tags="add_ela"/>
    </def-attr>

    <def-attr n="a_vrb_neg">
      <attr-item tags="neg"/>
    </def-attr>

    <def-attr n="vrb_adv">
      <attr-item tags="vblex.adv"/>
    </def-attr>


  </section-def-attrs>

  <section-def-vars>
    <def-var n="numero" v="&lt;sg&gt;"/>
    <def-var n="genere" v="&lt;nt&gt;"/>
    <def-var n="persona" v="&lt;p3&gt;"/>
    <def-var n="conditional" v="False"/>
    <def-var n="caseFirstWord"/>
    <def-var n="EOS" v="true"/>
  </section-def-vars>

  <section-def-macros>
    <!--The macro maps tags from the sh tagset to their equivalent in sl-->
    <def-macro n="verb_adapter" npar="1">
      <choose>
	<when>
	  <test>
	    <and>
	      <not><equal><clip pos="1" side="tl" part="a_adv"/><lit-tag v="adv"/></equal></not>
	      <not><equal><clip pos="1" side="tl" part="a_adj"/><lit-tag v="adj"/></equal></not>
	    </and>
	  </test>          
	  <let><clip pos="1" side="tl" part="whole"/>
	  <concat>
	    <clip pos="1" side="tl" part="lemh"/>
	    <clip pos="1" side="tl" part="a_vrb"/>
	    <clip pos="1" side="tl" part="asp"/>
	    <clip pos="1" side="tl" part="trn"/>
	    <clip pos="1" side="tl" part="tns"/>
	    <clip pos="1" side="tl" part="prs"/>
	    <clip pos="1" side="tl" part="nbr"/>
	    <clip pos="1" side="tl" part="lemq"/>
	  </concat>
	  </let>
	</when>
      </choose>
    </def-macro>

    <!--The macro maps tags from the sh tagset to their equivalent in sl-->
    <def-macro n="pr_adapter" npar="1">
      <let><clip pos="1" side="tl" part="whole"/>
      <concat>
	<clip pos="1" side="tl" part="lemh"/>
	<clip pos="1" side="tl" part="a_prp"/>
	<clip pos="1" side="tl" part="cas"/>
      </concat>
      </let>
    </def-macro>

    <def-macro n="voc_adapter" npar="1">
      <choose>
        <when>
          <test>               
	    <equal caseless="yes"><clip pos="1" side="sl" part="cas"/><lit-tag v="voc"/></equal>
          </test>          
          <let><clip pos="1" side="tl" part="cas"/><lit-tag v="nom"/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="clitic_m_to_mfn" npar="1">
      <choose>
        <when>
          <test>    
	    <and>
	      <equal caseless="yes"><clip pos="1" side="sl" part="lemh"/><lit v="clitic"/></equal>
	      <equal caseless="yes"><clip pos="1" side="sl" part="gen"/><lit-tag v="m"/></equal>
	    </and>
          </test>          
          <let><clip pos="1" side="tl" part="gen"/><lit-tag v="mfn"/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="firstWord" npar="1"><!--nova versió 8-febr-08  -->
      <choose>
	<when>
	  <test>
	    <equal> 
	      <var n="EOS"/>
	      <lit v="true"/>
	    </equal> 
	  </test>
	  <let>
	    <var n="caseFirstWord"/>
	    <lit v="Aa"/>
	  </let>
	</when>
	<otherwise> 
	  <let>
	    <var n="caseFirstWord"/>
	    <lit v="aa"/>
	  </let>
	</otherwise>
      </choose>
      <let>
	<var n="EOS"/>
	<lit v="false"/>
      </let>
    </def-macro>
    
    <def-macro n="mima_to_m" npar="1">
      <choose><!--If the word translates to the target language as masculine (and not feminine or nt), the target language tag is changed from mi/ma -> m -->
        <when>
          <test>
            <or>                
	      <equal caseless="yes"><clip pos="1" side="tl" part="gen"/><lit-tag v="mi"/></equal>
	      <equal caseless="yes"><clip pos="1" side="tl" part="gen"/><lit-tag v="ma"/></equal>
            </or>
          </test>          
          <let><clip pos="1" side="tl" part="gen"/><lit-tag v="m"/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="adverb_adapter" npar="1">
      <choose>
	<when>
	  <test>    
	    <and>
	      <equal caseless="yes"><clip pos="1" side="sl" part="a_adv_form_SH"/><lit-tag v="ssup"/></equal>
	      <equal caseless="yes"><clip pos="1" side="tl" part="a_adv_addWord"/><lit-tag v="add_ela"/></equal>
	    </and>
	  </test>          
	  <out>
	    <chunk name="Adv" case="caseFirstWord">
	      <tags>
		<tag><lit-tag v="VB"/></tag>
	      </tags>
	      <lu>
		<lit v="veliko"/>	
		<lit-tag v="adv.sint.ela"/>
	      </lu>
	      <b/>
	      <lu>
		<clip pos="1" side="tl" part="lemh"/>
		<clip pos="1" side="tl" part="a_adv"/>
		<lit-tag v="sint"/>
	      </lu>
	    </chunk>
	  </out>
	</when>
	<when>
	  <test>    
	    <equal caseless="yes"><clip pos="1" side="sl" part="a_adv_form_SH"/><lit-tag v="ssup"/></equal>
	  </test>          
	  <out>
	    <chunk name="Adv" case="caseFirstWord">
	      <tags>
		<tag><lit-tag v="VB"/></tag>
	      </tags>
	      <lu>
		<clip pos="1" side="tl" part="lemh"/>
		<clip pos="1" side="tl" part="a_adv"/>
		<lit-tag v="sint.ela"/>
	      </lu>
	    </chunk>
	  </out>
	</when>	
	<when>
	  <test>    
	    <and>
	      <equal caseless="yes"><clip pos="1" side="sl" part="a_adv_form_SH"/><lit-tag v="sup"/></equal>
	      <equal caseless="yes"><clip pos="1" side="tl" part="a_adv_addWord"/><lit-tag v="add_sup"/></equal>
	    </and>
	  </test>          
	  <out>
	    <chunk name="Adv" case="caseFirstWord">
	      <tags>
		<tag><lit-tag v="VB"/></tag>
	      </tags>
	      <lu>
		<lit v="najbolj"/>	
		<lit-tag v="adv.sint.sup"/>
	      </lu>
	      <b/>
	      <lu>
		<clip pos="1" side="tl" part="lemh"/>
		<clip pos="1" side="tl" part="a_adv"/>
		<lit-tag v="sint"/>
	      </lu>
	    </chunk>
	  </out>
	</when>	
	<when>
	  <test>    
	    <equal caseless="yes"><clip pos="1" side="sl" part="a_adv_form_SH"/><lit-tag v="sup"/></equal>
	  </test>          
	  <out>
	    <chunk name="Adv" case="caseFirstWord">
	      <tags>
		<tag><lit-tag v="VB"/></tag>
	      </tags>
	      <lu>
		<clip pos="1" side="tl" part="lemh"/>
		<clip pos="1" side="tl" part="a_adv"/>
		<lit-tag v="sint.sup"/>
	      </lu>
	    </chunk>
	  </out>
	</when>
	<when>
	  <test>    
	    <and>
	      <equal caseless="yes"><clip pos="1" side="sl" part="a_adv_form_SH"/><lit-tag v="comp"/></equal>
	      <equal caseless="yes"><clip pos="1" side="tl" part="a_adv_addWord"/><lit-tag v="add_comp"/></equal>
	    </and>
	  </test>          
	  <out>
	    <chunk name="Adv" case="caseFirstWord">
	      <tags>
		<tag><lit-tag v="VB"/></tag>
	      </tags>
	      <lu>
		<lit v="bolj"/>	
		<lit-tag v="adv.sint"/>
	      </lu>
	      <b/>
	      <lu>
		<clip pos="1" side="tl" part="lemh"/>
		<clip pos="1" side="tl" part="a_adv"/>
		<lit-tag v="sint"/>
	      </lu>
	    </chunk>
	  </out>
	</when>	
	<when>
	  <test>    
	    <equal caseless="yes"><clip pos="1" side="sl" part="a_adv_form_SH"/><lit-tag v="comp"/></equal>
	  </test>          
	  <out>
	    <chunk name="Adv" case="caseFirstWord">
	      <tags>
		<tag><lit-tag v="VB"/></tag>
	      </tags>
	      <lu>
		<clip pos="1" side="tl" part="lemh"/>
		<clip pos="1" side="tl" part="a_adv"/>
		<lit-tag v="sint.comp"/>
	      </lu>
	    </chunk>
	  </out>
	</when>	
	<otherwise> <!-- Else: adv -> adv.sint -->
	  <out>
	    <chunk name="Adv" case="caseFirstWord">
	      <tags>
		<tag><lit-tag v="VB"/></tag>
	      </tags>
	      <lu>
		<clip pos="1" side="tl" part="lemh"/>
		<clip pos="1" side="tl" part="a_adv"/>
		<lit-tag v="sint"/>
	      </lu>
	    </chunk>
	  </out>
	</otherwise>
      </choose>
    </def-macro>

  </section-def-macros>

  <section-rules>
	
	
	<rule comment="Vblex.imperf.*.pprs.adv -> vblex.pp">
      <pattern>
		<pattern-item n="vblex_imperf_adv"/>
      </pattern>
      <action>
		<call-macro n="firstWord"><with-param pos="1"/></call-macro>
		<call-macro n="verb_adapter"><with-param pos="1"/></call-macro>
		<out>
		  <chunk name="VerbImerfPprsAdv_to_VblexPP" case="caseFirstWord">
		    <tags>
	          <tag><lit-tag v="VB"/></tag>
		    </tags>
		    <lu>
	          <clip pos="1" side="tl" part="lemh"/>
		      <clip pos="1" side="tl" part="a_vrb"/>
	          <clip pos="1" side="tl" part="asp"/>
	          <clip pos="1" side="tl" part="trn"/>
	          <lit-tag v="pp.m.sg.nom.ind"/>
		    </lu>
		  </chunk>
		</out>
      </action>
    </rule>
	
	<rule comment="vblex.perf.*.pprs.adv -> (ko je) + verb.past">
      <pattern>
		<pattern-item n="vblex_perf_adv"/>
      </pattern>
      <action>
		<call-macro n="firstWord"><with-param pos="1"/></call-macro>
		<call-macro n="verb_adapter"><with-param pos="1"/></call-macro>
		<choose>
		<when>
		    <test>
		      <equal>
				<clip pos="1" side="tl" part="trn"/>
				<lit-tag v="ref"/>
		      </equal>
		    </test>	
		    <out>
		      <chunk name="VerbPerfPprsAdv_to_VblexRefPast" case="caseFirstWord">
			<tags>
			  <tag><lit-tag v="VB"/></tag>
			</tags>
				<lu>
					<lit v="ko"/>
					<lit-tag v="cnjsub"/>
				</lu>
				<b/>
				<lu>
					<lit v="se"/>
					<lit-tag v="prn.ref.mf.sp.loc"/>
				</lu>
				<b/>
				<lu>
					<lit v="biti"/>
					<lit-tag v="vbser.pres.p3.sg"/>
				</lu>
				<b/>
			    <lu>
		          <clip pos="1" side="tl" part="lemh"/>
			      <clip pos="1" side="tl" part="a_vrb"/>
		          <clip pos="1" side="tl" part="asp"/>
		          <clip pos="1" side="tl" part="trn"/>
		          <lit-tag v="past.m.sg"/>
			    </lu>
		      </chunk>
		    </out>
		  </when>
		  <otherwise>
			<out>
			  <chunk name="VerbPerfPprsAdv_to_VblexPast" case="caseFirstWord">
			    <tags>
		          <tag><lit-tag v="VB"/></tag>
			    </tags>
				<lu>
					<lit v="ko"/>
					<lit-tag v="cnjsub"/>
				</lu>
				<b/>
				<lu>
					<lit v="biti"/>
					<lit-tag v="vbser.pres.p3.sg"/>
				</lu>
				<b/>
			    <lu>
		          <clip pos="1" side="tl" part="lemh"/>
			      <clip pos="1" side="tl" part="a_vrb"/>
		          <clip pos="1" side="tl" part="asp"/>
		          <clip pos="1" side="tl" part="trn"/>
		          <lit-tag v="past.m.sg"/>
			    </lu>
			  </chunk>
			</out>
		 </otherwise>
		</choose>
      </action>
    </rule>

    <rule comment="vblex">
      <pattern>
	<pattern-item n="vblex"/>
      </pattern>
      <action>
	<call-macro n="firstWord"><with-param pos="1"/></call-macro>
	<call-macro n="verb_adapter"><with-param pos="1"/></call-macro>
	<choose>
	  <when>
	    <test>
	      <and>
		<equal>
		  <clip pos="1" side="sl" part="vrb_adv"/>
		  <lit-tag v="vblex.adv"/>
		</equal>
		<equal>
		  <clip pos="1" side="tl" part="a_adj"/>
		  <lit-tag v="adj"/>
		</equal>
	      </and>
	    </test>
	    <out>
	      <chunk name="Vrb_Adj_m_sg_nom" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <lit-tag v="adj.m.sg.nom.ind"/>
		</lu>
	      </chunk>
	    </out>
	  </when>
	  <when>
	    <test>
	      <equal>
		<clip pos="1" side="sl" part="vrb_adv"/>
		<lit-tag v="vblex.adv"/>
	      </equal>
	    </test>
	    <out>
	      <chunk name="Vrb_Adv" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_adv"/>
		  <lit-tag v="sint"/> <!-- because the verb adapter removes the adv tag -->
		</lu>
	      </chunk>
	    </out>
	  </when>
	  <when> <!-- NEEDS FIX? pp -> pp? -->
	    <test>
	      <equal>
		<clip pos="1" side="tl" part="tns"/>
		<lit-tag v="pp"/>
	      </equal>
	    </test>
	    <out>
	      <chunk name="VerbPP" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_vrb"/>
		  <clip pos="1" side="tl" part="asp"/>
		  <clip pos="1" side="tl" part="trn"/>
		  <lit-tag v="pres.p3"/>
		  <clip pos="1" side="tl" part="nbr"/>
		</lu>
	      </chunk>
	    </out>
	  </when>
		<when>
			<test>
				<or>
					<equal>
						<clip pos="1" side="tl" part="tns"/>
						<lit-tag v="aor"/> <!-- perf -->
					</equal>
					<equal>
						<clip pos="1" side="tl" part="tns"/>
						<lit-tag v="pii"/> <!-- imperf -->
					</equal>
				</or>
			</test>
			<out>
				<chunk name="VerbAOR_PII" case="caseFirstWord">
					<tags>
						<tag><lit-tag v="VB"/></tag>
					</tags>
					<lu>
						<clip pos="1" side="tl" part="lemh"/>
						<clip pos="1" side="tl" part="a_vrb"/>
						<clip pos="1" side="tl" part="asp"/>
						<clip pos="1" side="tl" part="trn"/>
						<lit-tag v="past.m"/>
						<clip pos="1" side="tl" part="nbr"/>
					</lu>
					<b/>
					<lu>
						<lit v="biti"/>
						<lit-tag v="vbser.pres"/>
						<clip pos="1" side="tl" part="prs"/>
						<clip pos="1" side="tl" part="nbr"/>
					</lu>
				</chunk>
			</out>
		</when>
	  <when>
	    <test>
	      <or>
		<equal>
		  <clip pos="1" side="tl" part="tns"/>
		  <lit-tag v="ref.lp"/>
		</equal>
		<equal>
		  <clip pos="1" side="tl" part="tns"/>
		  <lit-tag v="lp"/>
		</equal>
	      </or>
	    </test>
	    <out>
	      <chunk name="Verb_ref_lp" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_vrb"/>
		  <clip pos="1" side="tl" part="asp"/>
		  <clip pos="1" side="tl" part="trn"/>
		  <lit-tag v="past"/>
		  <clip pos="1" side="sl" part="gen"/>
		  <clip pos="1" side="tl" part="nbr"/>
		</lu>
	      </chunk>
	    </out>
	  </when>
	  <when>
	    <test>
	      <and>
		<equal>
		  <clip pos="1" side="sl" part="a_vrb"/>
		  <lit-tag v="vblex"/>
		</equal>
		<equal>
		  <clip pos="1" side="tl" part="a_vrb"/>
		  <lit-tag v="vbser"/>
		</equal>
	      </and>
	    </test>
	    <out>
	      <chunk name="Vblex-to-Vbser" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_vrb"/>	
		  <clip pos="1" side="tl" part="tns"/>
		  <clip pos="1" side="tl" part="prs"/>
		  <clip pos="1" side="tl" part="nbr"/>
		</lu>
	      </chunk>
	    </out>
	  </when>
	  <otherwise>
	    <out>
	      <chunk name="Verb" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		  <tag><clip pos="1" side="tl" part="a_vrb"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="whole"/>
		</lu>
	      </chunk>
	    </out>
	  </otherwise>
	</choose>
      </action>
    </rule>

	<rule comment="Biti.vbser">
      <pattern>
	<pattern-item n="biti_vbser"/>
      </pattern>
		<action>
		<call-macro n="firstWord"><with-param pos="1"/></call-macro>
		<call-macro n="verb_adapter"><with-param pos="1"/></call-macro>
			<choose>
				<when>
					<test>
						<equal>
							<clip pos="1" side="sl" part="tns"/>
							<lit-tag v="lp"/>
						</equal>
					</test>	
				<out>
					<chunk name="BitiVbser_LP" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="VB"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lemh"/>
							<clip pos="1" side="tl" part="a_vrb"/>
							<lit-tag v="past"/>
							<clip pos="1" side="sl" part="gen"/>
							<clip pos="1" side="tl" part="nbr"/>
						</lu>
					</chunk>
				</out>
				</when>
				<when>
					<test>
						<equal>
							<clip pos="1" side="sl" part="tns"/>
							<lit-tag v="aor"/>
						</equal>
					</test>	
				<out>
					<chunk name="BitiVbser_AOR" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="VB"/></tag>
						</tags>
						<lu>
							<lit v="biti"/>
							<lit-tag v="vbser.pres"/>
							<clip pos="1" side="tl" part="prs"/>
							<clip pos="1" side="tl" part="nbr"/>
						</lu>
						<b/>
						<lu>
							<clip pos="1" side="tl" part="lemh"/>
							<clip pos="1" side="tl" part="a_vrb"/>
							<lit-tag v="past"/>
							<clip pos="1" side="tl" part="gen"/>
							<clip pos="1" side="tl" part="nbr"/>
						</lu>
					</chunk>
				</out>
				</when>
				<when>
					<test>
						<equal>
							<clip pos="1" side="sl" part="tns"/>
							<lit-tag v="pii"/>
						</equal>
					</test>	
				<out>
					<chunk name="BitiVbser_PII" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="VB"/></tag>
						</tags>
						<lu>
							<lit v="biti"/>
							<lit-tag v="vbser.pres"/>
							<clip pos="1" side="tl" part="prs"/>
							<clip pos="1" side="tl" part="nbr"/>
						</lu>
						<b/>
						<lu>
							<clip pos="1" side="tl" part="lemh"/>
							<clip pos="1" side="tl" part="a_vrb"/>
							<lit-tag v="past.m"/> <!-- no gender on SH side -->
							<clip pos="1" side="tl" part="nbr"/>
						</lu>
					</chunk>
				</out>
				</when>
				<otherwise>
			    <out>
			      <chunk name="Verb" case="caseFirstWord">
				<tags>
				  <tag><lit-tag v="VB"/></tag>
				  <tag><clip pos="1" side="tl" part="a_vrb"/></tag>
				</tags>
				<lu>
				  <clip pos="1" side="tl" part="whole"/>
				</lu>
			      </chunk>
			    </out>
			  </otherwise>
			</choose>
		</action>
	</rule>
	
	<rule comment="Imati vbhaver">
      <pattern>
	<pattern-item n="imati_vbhaver"/>
      </pattern>
		<action>
		<call-macro n="firstWord"><with-param pos="1"/></call-macro>
		<call-macro n="verb_adapter"><with-param pos="1"/></call-macro>
			<choose>
				<when>
					<test>
						<or>
							<equal>
								<clip pos="1" side="sl" part="tns"/>
								<lit-tag v="ref.lp"/>
							</equal>
							<equal>
								<clip pos="1" side="sl" part="tns"/>
								<lit-tag v="lp"/>
							</equal>
						</or>
					</test>	
				<out>
					<chunk name="ImatiVbhaver_lp" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="VB"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lemh"/>
							<clip pos="1" side="tl" part="a_vrb"/>
							<clip pos="1" side="tl" part="asp"/>
							<clip pos="1" side="tl" part="trn"/>
							<lit-tag v="past"/>
							<clip pos="1" side="sl" part="gen"/>
							<clip pos="1" side="tl" part="nbr"/>
						</lu>
					</chunk>
				</out>
				</when>
				<when>
					<test>
						<equal>
							<clip pos="1" side="sl" part="tns"/>
							<lit-tag v="pii"/>
						</equal>
					</test>	
				<out>
					<chunk name="ImatiVbhaver_PII" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="VB"/></tag>
						</tags>
						<lu>
							<lit v="biti"/>
							<lit-tag v="vbser.pres"/>
							<clip pos="1" side="tl" part="prs"/>
							<clip pos="1" side="tl" part="nbr"/>
						</lu>
						<b/>
						<lu>
							<clip pos="1" side="tl" part="lemh"/>
							<clip pos="1" side="tl" part="a_vrb"/>
							<clip pos="1" side="tl" part="asp"/>
							<clip pos="1" side="tl" part="trn"/>
							<lit-tag v="past.m"/> <!-- no gender on SH side -->
							<clip pos="1" side="tl" part="nbr"/>
						</lu>
					</chunk>
				</out>
				</when>
				<otherwise>
			    <out>
			      <chunk name="Verb" case="caseFirstWord">
				<tags>
				  <tag><lit-tag v="VB"/></tag>
				  <tag><clip pos="1" side="tl" part="a_vrb"/></tag>
				</tags>
				<lu>
				  <clip pos="1" side="tl" part="whole"/>
				</lu>
			      </chunk>
			    </out>
			  </otherwise>
			</choose>
		</action>
	</rule>
	
	<rule comment="Htjeti vbmod.clt.futI + vblex.*.inf">
      <pattern>
		<pattern-item n="vbfutI"/>
		<pattern-item n="vbinf"/>
      </pattern>
		<action>
		<call-macro n="firstWord"><with-param pos="1"/></call-macro>
		<call-macro n="verb_adapter"><with-param pos="1"/></call-macro>
		<call-macro n="verb_adapter"><with-param pos="2"/></call-macro>
			<choose>
			  <when>
			    <test>
			      <equal><clip pos="2" side="sl" part="a_vrb"/><lit-tag v="vbser"/></equal>
			    </test>
			    <out>
			      <chunk name="vbserfut" case="caseFirstWord">
				<tags>
				  <tag><lit-tag v="VB"/></tag>
				</tags>
				<lu>
				  <clip pos="1" side="tl" part="whole"/>
				</lu>					
			      </chunk>
			    </out>
			  </when>
				<when>
					<test>
						<equal>
							<clip pos="2" side="sl" part="lemh"/>
							<lit-tag v="htjeti"/>
						</equal>
					</test>	
				<out>
					<chunk name="HtjetiInf_HtjetiFut" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="VB"/></tag>
						</tags>
						
						<lu>
							<clip pos="1" side="tl" part="lemh"/>
							<clip pos="1" side="tl" part="a_vrb"/>
							<clip pos="1" side="tl" part="tns"/>
							<clip pos="1" side="tl" part="prs"/>
							<clip pos="1" side="tl" part="nbr"/>
						</lu>
						<b/>
						<lu>
							<clip pos="2" side="tl" part="lemh"/>
							<lit-tag v="vblex.imperf.tv"/>
							<lit-tag v="past.m"/> <!-- TO DO: check pattern for gender -->
							<clip pos="1" side="tl" part="nbr"/>
						</lu>
					</chunk>
				</out>
				</when>
				<otherwise>
					<out>
						<chunk name="HtjetiFut_vblex" case="caseFirstWord">
							<tags>
								<tag><lit-tag v="VB"/></tag>
							</tags>
							<lu>
								<clip pos="1" side="tl" part="lemh"/>
								<clip pos="1" side="tl" part="a_vrb"/>
								<clip pos="1" side="tl" part="tns"/>
								<clip pos="1" side="tl" part="prs"/>
								<clip pos="1" side="tl" part="nbr"/>
							</lu>
							<b/>
							<lu>
								<clip pos="2" side="tl" part="lemh"/>
								<clip pos="2" side="tl" part="a_vrb"/>
								<clip pos="2" side="tl" part="asp"/>
								<clip pos="2" side="tl" part="trn"/> 
								<lit-tag v="past.m"/> <!-- TO DO: check patterns for X ću gledati (gender of this vblex) -->
								<clip pos="1" side="tl" part="nbr"/>
							</lu>
						</chunk>
					</out>
			  </otherwise>
			</choose>
			</action>
		</rule>

	<rule comment="vblex.*.inf + Htjeti vbmod.clt.futI ">
      <pattern>	
		<pattern-item n="vbinf"/>
		<pattern-item n="vbfutI"/>
      </pattern>
		<action>
		<call-macro n="firstWord"><with-param pos="1"/></call-macro>
		<call-macro n="verb_adapter"><with-param pos="1"/></call-macro>
		<call-macro n="verb_adapter"><with-param pos="2"/></call-macro>
		<choose>
		  <when>
		    <test>
		      <equal><clip pos="1" side="sl" part="a_vrb"/><lit-tag v="vbser"/></equal>
		    </test>
		    <out>
		      <chunk name="vbserfut" case="caseFirstWord">
			<tags>
			  <tag><lit-tag v="VB"/></tag>
			</tags>
			<lu>
			  <clip pos="2" side="tl" part="whole"/>
			</lu>					
		      </chunk>
		    </out>
		  </when>
			<when>
				<test>
					<equal>
						<clip pos="1" side="sl" part="lemh"/>
						<lit-tag v="htjeti"/>
					</equal>
				</test>	
			<out>
				<chunk name="HtjetiInf_HtjetiFut" case="caseFirstWord">
					<tags>
						<tag><lit-tag v="VB"/></tag>
					</tags>
					<lu>
						<clip pos="1" side="tl" part="lemh"/>
						<lit-tag v="vblex.imperf.tv"/>
						<lit-tag v="past.m"/> <!-- TO DO: check pattern for gender -->
						<clip pos="2" side="tl" part="nbr"/>
					</lu>
					<b/>
					<lu>
						<clip pos="2" side="tl" part="lemh"/>
						<clip pos="2" side="tl" part="a_vrb"/>
						<clip pos="2" side="tl" part="tns"/>
						<clip pos="2" side="tl" part="prs"/>
						<clip pos="2" side="tl" part="nbr"/>
					</lu>
				</chunk>
			</out>
			</when>
			<otherwise>
				<out>
					<chunk name="HtjetiFut_vblex" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="VB"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lemh"/>
							<clip pos="1" side="tl" part="a_vrb"/>
							<clip pos="1" side="tl" part="asp"/>
							<clip pos="1" side="tl" part="trn"/> 
							<lit-tag v="past.m"/> <!-- TO DO: check patterns for X ću gledati (gender of this vblex) -->
							<clip pos="2" side="tl" part="nbr"/>
						</lu>
						<b/>
						<lu>
							<clip pos="2" side="tl" part="lemh"/>
							<clip pos="2" side="tl" part="a_vrb"/>
							<clip pos="2" side="tl" part="tns"/>
							<clip pos="2" side="tl" part="prs"/>
							<clip pos="2" side="tl" part="nbr"/>
						</lu>
					</chunk>
				</out>
		  </otherwise>
		</choose>
		</action>
	</rule>
	
	
	<rule comment="vbmod rule">
      <pattern>
		<pattern-item n="vbmod"/>
      </pattern>
		<action>
		<call-macro n="firstWord"><with-param pos="1"/></call-macro>
		<call-macro n="verb_adapter"><with-param pos="1"/></call-macro>
		<choose>
			<when>
				<test>
					<and>
						<or>
						<equal>
							<clip pos="1" side="tl" part="lemh"/>
							<lit v="moči"/>
						</equal>
						<equal>
							<clip pos="1" side="tl" part="lemh"/>
							<lit v="morati"/>
						</equal>
						</or>
						<equal>
							<clip pos="1" side="sl" part="tns"/>
							<lit-tag v="imp"/>
						</equal>
					</and>
				</test>	
				<out>
					<chunk name="morati_moči_imp" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="VB"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lemh"/>
							<clip pos="1" side="tl" part="a_vrb"/>
							<clip pos="1" side="tl" part="asp"/>
							<clip pos="1" side="tl" part="trn"/>
							<lit-tag v="pres"/>
							<clip pos="1" side="sl" part="prs"/>
							<clip pos="1" side="tl" part="nbr"/>
						</lu>
					</chunk>
				</out>
			</when>
			<when> <!-- not good, does not exist .pprs.adv for MORATI, tmp solution -->
				<test>
					<and>
						<equal>
							<clip pos="1" side="tl" part="lemh"/>
							<lit-tag v="morati"/>
						</equal>
						<equal>
							<clip pos="1" side="sl" part="a_adv"/>
							<lit-tag v="adv"/>
						</equal>
					</and>
				</test>	
				<out>
					<chunk name="morati_pprsAdv" case="caseFirstWord">
						<tags>
							<tag><lit-tag v="VB"/></tag>
						</tags>
						<lu>
							<clip pos="1" side="tl" part="lemh"/>
							<clip pos="1" side="tl" part="a_vrb"/>
							<clip pos="1" side="tl" part="asp"/>
							<clip pos="1" side="tl" part="trn"/>
							<lit-tag v="pres.p3.sg"/>
						</lu>
					</chunk>
				</out>
			</when>
			<when>
				<test>
					<equal>
						<clip pos="1" side="sl" part="tns"/>
						<lit-tag v="lp"/>
					</equal>
				</test>	
			<out>
				<chunk name="vbmod_lp" case="caseFirstWord">
					<tags>
						<tag><lit-tag v="VB"/></tag>
					</tags>
					<lu>
						<clip pos="1" side="tl" part="lemh"/>
						<clip pos="1" side="tl" part="a_vrb"/>
						<clip pos="1" side="tl" part="asp"/>
						<clip pos="1" side="tl" part="trn"/>
						<lit-tag v="past"/>
						<clip pos="1" side="sl" part="gen"/>
						<clip pos="1" side="tl" part="nbr"/>
					</lu>
				</chunk>
			</out>
			</when>
			<when>
				<test>
					<or>
						<equal>
							<clip pos="1" side="sl" part="tns"/>
							<lit-tag v="pii"/>
						</equal>
						<equal>
							<clip pos="1" side="sl" part="tns"/>
							<lit-tag v="aor"/>
						</equal>
					</or>
				</test>	
			<out>
				<chunk name="vbmod_pii_aor" case="caseFirstWord">
					<tags>
						<tag><lit-tag v="VB"/></tag>
					</tags>
					<lu>
						<lit v="biti"/>
						<lit-tag v="vbser.pres"/>
						<clip pos="1" side="tl" part="prs"/>
						<clip pos="1" side="tl" part="nbr"/>
					</lu>
					<b/>
					<lu>
						<clip pos="1" side="tl" part="lemh"/>
						<clip pos="1" side="tl" part="a_vrb"/>
						<clip pos="1" side="tl" part="asp"/>
						<clip pos="1" side="tl" part="trn"/>
						<lit-tag v="past.m"/> <!-- no gender on SH side -->
						<clip pos="1" side="tl" part="nbr"/>
					</lu>
				</chunk>
			</out>
			</when>
			<when>
				<test>
					<equal>
						<clip pos="1" side="sl" part="tns"/>
						<lit-tag v="imp"/>
					</equal>
				</test>	
			<out>
				<chunk name="vbmod_imp" case="caseFirstWord">
					<tags>
						<tag><lit-tag v="VB"/></tag>
					</tags>
					<lu>
						<clip pos="1" side="tl" part="lemh"/>
						<clip pos="1" side="tl" part="a_vrb"/>
						<clip pos="1" side="tl" part="asp"/>
						<clip pos="1" side="tl" part="trn"/>
						<clip pos="1" side="tl" part="tns"/>
						<clip pos="1" side="tl" part="prs"/>
						<clip pos="1" side="tl" part="nbr"/>
					</lu>
				</chunk>
			</out>
			</when>
			<when>
				<test>
					<equal>
						<clip pos="1" side="sl" part="a_adv"/>
						<lit-tag v="adv"/>
					</equal>
				</test>	
			<out>
				<chunk name="vbmod_pprsAdv" case="caseFirstWord">
					<tags>
						<tag><lit-tag v="VB"/></tag>
					</tags>
					<lu>
						<clip pos="1" side="tl" part="lemh"/>
						<clip pos="1" side="tl" part="a_adv"/>
						<lit-tag v="sint"/>
					</lu>
				</chunk>
			</out>
			</when>
			<otherwise>
		    <out>
		      <chunk name="vbmod_othws" case="caseFirstWord">
			<tags>
			  <tag><lit-tag v="VB"/></tag>
			</tags>
			<lu>
				<clip pos="1" side="tl" part="lemh"/>
				<clip pos="1" side="tl" part="a_vrb"/>
				<clip pos="1" side="tl" part="asp"/>
				<clip pos="1" side="tl" part="trn"/>
				<clip pos="1" side="tl" part="tns"/>
				<clip pos="1" side="tl" part="prs"/>
				<clip pos="1" side="tl" part="nbr"/>
			</lu>
		      </chunk>
		    </out>
		  </otherwise>
		</choose>
		</action>
	</rule>
	

    <rule comment="pr">
      <pattern>
	<pattern-item n="pr"/>
      </pattern>
      <action>
	<call-macro n="firstWord"><with-param pos="1"/></call-macro>
	<call-macro n="pr_adapter"><with-param pos="1"/></call-macro>
	<out>
	  <chunk name="Preposition" case="caseFirstWord">
	    <tags>
	      <tag><lit-tag v="PR"/></tag>
	      <tag><clip pos="1" side="tl" part="a_prp"/></tag>
	    </tags>
	    <lu>
	      <clip pos="1" side="tl" part="whole"/>
	    </lu>
	  </chunk>
	</out>
      </action>
    </rule>

    <!--NOTE by krvoje: biti<vblex> == to beat, and biti<vbser> == to be are homographs, added a rule in disambiguation-->
    <rule comment="je bilo (vbser + vblex) = je bilo (vbser + vbser) OR je gledal (vbser + vblex)">
      <pattern>
      	<pattern-item n="vbser_past"/>
	<pattern-item n="vblex"/>
      </pattern>
      <action>
	<call-macro n="firstWord"><with-param pos="1"/></call-macro>
	<call-macro n="verb_adapter"><with-param pos="1"/></call-macro>
	<choose>
	  <when>
	    <test>
	      <equal>
		<clip pos="2" side="tl" part="a_vrb"/>
		<lit-tag v="vbser"/>
	      </equal>
	    </test>	
	    <out>
	      <chunk name="VerbVbser" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_vrb"/>
		  <clip pos="1" side="tl" part="trn"/>
		  <clip pos="1" side="tl" part="tns"/>
		  <clip pos="1" side="tl" part="prs"/>
		  <clip pos="1" side="tl" part="nbr"/>
		</lu>
		<b/>	
		<lu>
		  <clip pos="2" side="tl" part="lemh"/>
		  <clip pos="2" side="tl" part="a_vrb"/>
		  <lit-tag v="past"/> <!-- Move to t2x? -->
		  <clip pos="2" side="tl" part="gen"/>
		  <clip pos="2" side="tl" part="nbr"/>
		</lu>
	      </chunk>
	    </out>
	  </when>
	  <otherwise>
	    <out>
	      <chunk name="VerbVbser" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_vrb"/>
		  <clip pos="1" side="tl" part="trn"/>
		  <clip pos="1" side="tl" part="tns"/>
		  <clip pos="1" side="tl" part="prs"/>
		  <clip pos="1" side="tl" part="nbr"/>
		</lu>
		<b/>	
		<lu>
		  <clip pos="2" side="tl" part="lemh"/>
		  <clip pos="2" side="tl" part="a_vrb"/>
		  <clip pos="2" side="tl" part="asp"/>
		  <clip pos="2" side="tl" part="trn"/>
		  <lit-tag v="past"/> <!-- Move to t2x? -->
		  <clip pos="2" side="tl" part="gen"/>
		  <clip pos="2" side="tl" part="nbr"/>
		</lu>
	      </chunk>
	    </out>
	  </otherwise>
	</choose>
      </action>
    </rule>


    <rule comment="Adj (adj.pst.nt.sg.acc) -> adv">
      <pattern>
      	<pattern-item n="adj_ADV"/>
      </pattern>
      <action>
	<call-macro n="firstWord"><with-param pos="1"/></call-macro>
	<choose>
	  <when>
	    <test>
	      <and>
		<equal>
		  <clip pos="1" side="sl" part="a_adj"/>
		  <lit-tag v="adj"/>
		</equal>
		<equal>
		  <clip pos="1" side="tl" part="a_adv"/>
		  <lit-tag v="adv"/>
		</equal>
	      </and>
	    </test>	
	    <out>
	      <chunk name="AdjToAdv" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_adv"/>
		  <lit-tag v="sint"/>
		</lu>
	      </chunk>
	    </out>
	  </when>
	  <otherwise>
	    <out>
	      <chunk name="Adj(adverb)" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_adj"/>
		  <clip pos="1" side="tl" part="gen"/>
		  <clip pos="1" side="tl" part="nbr"/>
		  <clip pos="1" side="tl" part="cas"/>
		  <clip pos="1" side="tl" part="def"/>
		</lu>
	      </chunk>
	    </out>
	  </otherwise>
	</choose>
      </action>
    </rule>

    <rule comment="(se) ne biti(past) + verb - (part.neg + vbser.clt + verb) -> (se) biti.neg verb(past)">
      <pattern>
	<pattern-item n="ne_part"/>
	<pattern-item n="vbser_past"/>
	<pattern-item n="verb"/>
      </pattern>
      <action>
	<call-macro n="firstWord"><with-param pos="1"/></call-macro>
	<call-macro n="verb_adapter"><with-param pos="2"/></call-macro>
	<out>
	  <chunk name="Verb" case="caseFirstWord">
	    <tags>
	      <tag><lit-tag v="VB"/></tag>
	      <tag><clip pos="2" side="tl" part="a_vrb"/></tag>
	    </tags>
	    <lu>
	      <clip pos="2" side="tl" part="lemh"/>
	      <clip pos="2" side="tl" part="a_vrb"/>
	      <clip pos="2" side="tl" part="tns"/>
	      <lit-tag v="neg"/>
	      <clip pos="2" side="tl" part="prs"/>
	      <clip pos="2" side="tl" part="nbr"/>
	    </lu>
	    <b/>
	    <lu>
	      <clip pos="3" side="tl" part="lemh"/>
	      <clip pos="3" side="tl" part="a_vrb"/>
	      <clip pos="3" side="tl" part="asp"/>
	      <lit-tag v="tv.past"/>
	      <clip pos="3" side="tl" part="gen"/>
	      <clip pos="3" side="tl" part="nbr"/>
	    </lu>	
	  </chunk>
	</out>
      </action>
    </rule>

    <rule comment="Adjectives rule">
      <pattern>
	<pattern-item n="adj"/>
      </pattern>
      <action>
	<call-macro n="firstWord"><with-param pos="1"/></call-macro>
	<call-macro n="mima_to_m"><with-param pos="1"/></call-macro>
	<call-macro n="voc_adapter"><with-param pos="1"/></call-macro>
	<choose>
	  <when> <!-- adjective to adverb rule -->
	    <test>
	      <and>
		<equal>
		  <clip pos="1" side="sl" part="a_adj"/>
		  <lit-tag v="adj"/>
		</equal>
		<equal>
		  <clip pos="1" side="tl" part="a_adv"/>
		  <lit-tag v="adv"/>
		</equal>
	      </and>
	    </test>	
	    <out>
	      <chunk name="AdjToAdv2" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_adv"/>
		  <lit-tag v="sint"/>
		</lu>
	      </chunk>
	    </out>
	  </when>
	  <when> <!-- adjective to pronoun rule -->
	    <test>
	      <and>
		<equal>
		  <clip pos="1" side="sl" part="a_adj"/>
		  <lit-tag v="adj"/>
		</equal>
		<or>
		<equal>		  
		  <clip pos="1" side="tl" part="a_prn"/>
		  <lit-tag v="prn.ind"/>
		</equal>
		<equal>		  
		  <clip pos="1" side="tl" part="a_prn"/>
		  <lit-tag v="prn.ind.neg"/>
		</equal>
		</or>
	      </and>
	    </test>	
	    <out>
	      <chunk name="AdjToPrn" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_prn"/>
		  <clip pos="1" side="tl" part="gen"/>
		  <clip pos="1" side="tl" part="nbr"/>
		  <clip pos="1" side="tl" part="cas"/>
		</lu>
	      </chunk>
	    </out>
          </when>
	  <otherwise>
	    <out>
	      <chunk name="Adj" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_adj"/>
		  <clip pos="1" side="tl" part="gen"/>
		  <clip pos="1" side="tl" part="nbr"/>
		  <clip pos="1" side="tl" part="cas"/>
		  <lit-tag v="ind"/> <!-- Add def? in SL not all forms have def -->
		</lu>
	      </chunk>
	    </out>
	  </otherwise>
	</choose>
      </action>
    </rule>

    <rule comment="NUM + mu je (clitic + biti) -> ima (imeti) + NUM">
      <pattern>
	<pattern-item n="num"/>
	<pattern-item n="clitic"/>
	<pattern-item n="biti"/>
      </pattern>
      <action>
	<call-macro n="verb_adapter"><with-param pos="2"/></call-macro>
	<out>
	  <chunk name="NumCliticBiti" case="caseFirstWord">
	    <tags>
	      <tag><lit-tag v="VB"/></tag>
	    </tags>
	    <lu>
	      <lit v="imeti"/>	
	      <lit-tag v="vblex.imperf.tv"/> <!-- fix in t2x? -->
	      <clip pos="3" side="tl" part="tns"/>
	      <clip pos="3" side="tl" part="prs"/>
	      <clip pos="3" side="tl" part="nbr"/>
	    </lu>	
	    <b/>
	    <lu>
	      <clip pos="1" side="tl" part="whole"/>
	    </lu>
	  </chunk>
	</out>
      </action>
    </rule>

    <rule comment="se igraju (clitic + verb.ref) -> se igrajo (se + verb)">
      <pattern>
	<pattern-item n="clitic"/>
	<pattern-item n="vblex_ref"/>
      </pattern>
      <action>
	<call-macro n="verb_adapter"><with-param pos="2"/></call-macro>
	<out>
	  <chunk name="CliticAndVblex" case="caseFirstWord">
	    <tags>
	      <tag><lit-tag v="VB"/></tag>
	    </tags>
	    <lu>
	      <clip pos="1" side="tl" part="whole"/>
	    </lu>
	    <b/>
	    <lu>
	      <clip pos="2" side="tl" part="lemh"/> 
	      <clip pos="2" side="tl" part="a_vrb"/>
	      <clip pos="2" side="tl" part="asp"/>
	      <clip pos="2" side="tl" part="trn"/>
	      <clip pos="2" side="tl" part="tns"/>
	      <clip pos="2" side="tl" part="prs"/>
	      <clip pos="2" side="tl" part="nbr"/>
	    </lu>	
	  </chunk>
	</out>
      </action>
    </rule>

    <rule comment="Adverbs">
      <pattern>
	<pattern-item n="adv"/>
      </pattern>
      <action>
	<call-macro n="firstWord"><with-param pos="1"/></call-macro>
	<choose>
	  <when>
	    <test>
	      <and>
		<equal>
		  <clip pos="1" side="sl" part="a_adv"/>
		  <lit-tag v="adv"/>
		</equal>
		<equal>
		  <clip pos="1" side="tl" part="a_adj"/>
		  <lit-tag v="adj"/>
		</equal>
		<equal>
		  <clip pos="1" side="sl" part="a_adv_form_SH"/> <!-- SH = adv.ssup -> SL = adv.sint.ela -->
		  <lit-tag v="ssup"/>
		</equal>
		<equal>
		  <clip pos="1" side="tl" part="a_adv_addWord"/>
		  <lit-tag v="add_ela"/>
		</equal>
	      </and>
	    </test>	
	    <out>
	      <chunk name="Adv-to-Adj_addEla" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <lit v="veliko"/>	
		  <lit-tag v="adv.sint.ela"/>
		</lu>
		<b/>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_adj"/>
		  <clip pos="1" side="tl" part="gen"/>
		  <clip pos="1" side="tl" part="nbr"/>
		  <clip pos="1" side="tl" part="cas"/>
		  <clip pos="1" side="tl" part="def"/>
		</lu>
	      </chunk>
	    </out>
	  </when>
	  <when>
	    <test>
	      <and>
		<equal>
		  <clip pos="1" side="sl" part="a_adv"/>
		  <lit-tag v="adv"/>
		</equal>
		<equal>
		  <clip pos="1" side="tl" part="a_adj"/>
		  <lit-tag v="adj"/>
		</equal>
		<equal>
		  <clip pos="1" side="sl" part="a_adv_form_SH"/> <!-- SH = adv.sup -> SL = adv.sint.sup -->
		  <lit-tag v="sup"/>
		</equal>
		<equal>
		  <clip pos="1" side="tl" part="a_adv_addWord"/>
		  <lit-tag v="add_sup"/>
		</equal>
	      </and>
	    </test>	
	    <out>
	      <chunk name="Adv-to-Adj_addSup" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <lit v="najbolj"/>	
		  <lit-tag v="adv.sint.sup"/>
		</lu>
		<b/>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_adj"/>
		  <clip pos="1" side="tl" part="gen"/>
		  <clip pos="1" side="tl" part="nbr"/>
		  <clip pos="1" side="tl" part="cas"/>
		  <clip pos="1" side="tl" part="def"/>
		</lu>
	      </chunk>
	    </out>
	  </when>	
	  <when>
	    <test>
	      <and>
		<equal>
		  <clip pos="1" side="sl" part="a_adv"/>
		  <lit-tag v="adv"/>
		</equal>
		<equal>
		  <clip pos="1" side="tl" part="a_adj"/>
		  <lit-tag v="adj"/>
		</equal>
		<equal>
		  <clip pos="1" side="sl" part="a_adv_form_SH"/> <!-- SH = adv.comp -> SL = adv.sint.comp -->
		  <lit-tag v="comp"/>
		</equal>
		<equal>
		  <clip pos="1" side="tl" part="a_adv_addWord"/>
		  <lit-tag v="add_comp"/>
		</equal>
	      </and>
	    </test>	
	    <out>
	      <chunk name="Adv-to-Adj_addComp" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <lit v="bolj"/>	
		  <lit-tag v="adv.sint"/>
		</lu>
		<b/>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_adj"/>
		  <clip pos="1" side="tl" part="gen"/>
		  <clip pos="1" side="tl" part="nbr"/>
		  <clip pos="1" side="tl" part="cas"/>
		  <clip pos="1" side="tl" part="def"/>
		</lu>
	      </chunk>
	    </out>
	  </when>		
	  
	  
	  <when>
	    <test>
	      <and>
		<equal>
		  <clip pos="1" side="sl" part="a_adv"/>
		  <lit-tag v="adv"/>
		</equal>
		<equal>
		  <clip pos="1" side="tl" part="a_adj"/>
		  <lit-tag v="adj"/>
		</equal>
	      </and>
	    </test>	
	    <out>
	      <chunk name="Adv-to-Adj" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_adj"/>
		  <clip pos="1" side="tl" part="gen"/>
		  <clip pos="1" side="tl" part="nbr"/>
		  <clip pos="1" side="tl" part="cas"/>
		  <clip pos="1" side="tl" part="def"/>
		</lu>
	      </chunk>
	    </out>
	  </when>
	  <when>
	    <test>
	      <and>
		<equal>
		  <clip pos="1" side="sl" part="a_adv"/>
		  <lit-tag v="adv"/>
		</equal>
		<equal>
		  <clip pos="1" side="tl" part="a_part"/>
		  <lit-tag v="part"/>
		</equal>
	      </and>
	    </test>	
	    <out>
	      <chunk name="Adv-to-Part" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_part"/>
		</lu>
	      </chunk>
	    </out>
	  </when>
	  <when>
	    <test>
	      <and>
		<equal>
		  <clip pos="1" side="sl" part="a_adv"/>
		  <lit-tag v="adv"/>
		</equal>
		<equal>
		  <clip pos="1" side="tl" part="a_prp"/>
		  <lit-tag v="pr"/>
		</equal>
	      </and>
	    </test>	
	    <out>
	      <chunk name="Adv-to-Pr" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_prp"/>
		  <clip pos="1" side="tl" part="cas"/>
		</lu>
	      </chunk>
	    </out>
	  </when>
	  <when>
	    <test>
	      <and>
		<equal>
		  <clip pos="1" side="sl" part="a_adv"/>
		  <lit-tag v="adv"/>
		</equal>
		<or>
		  <equal>
		    <clip pos="1" side="tl" part="a_cnj"/>
		    <lit-tag v="cnjcoo"/>
		  </equal>
		  <equal>
		    <clip pos="1" side="tl" part="a_cnj"/>
		    <lit-tag v="cnjsub"/>
		  </equal>
		  <equal>
		    <clip pos="1" side="tl" part="a_cnj"/>
		    <lit-tag v="cnjadv"/>
		  </equal>
		</or>
	      </and>
	    </test>	
	    <out>
	      <chunk name="Adv-to-Cnj" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_cnj"/>
		</lu>
	      </chunk>
	    </out>
	  </when>
	  
	  
	  <when>
	    <test>
	      <and>
		<equal>
		  <clip pos="1" side="sl" part="a_adv_form_SH"/> <!-- SH = adv.ssup -> SL = adv.sint.ela -->
		  <lit-tag v="ssup"/>
		</equal>
		<equal>
		  <clip pos="1" side="tl" part="a_adv_addWord"/>
		  <lit-tag v="add_ela"/>
		</equal>
	      </and>
	    </test>	
	    <out>
	      <chunk name="Adv" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <lit v="veliko"/>	
		  <lit-tag v="adv.sint.ela"/>
		</lu>
		<b/>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_adv"/>
		  <lit-tag v="sint"/>
		</lu>
	      </chunk>
	    </out>
	  </when>
	  <when>
	    <test>
	      <equal>
		<clip pos="1" side="sl" part="a_adv_form_SH"/> <!-- SH = adv.ssup -> SL = adv.sint.ela -->
		<lit-tag v="ssup"/>
	      </equal>
	    </test>	
	    <out>
	      <chunk name="Adv" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_adv"/>
		  <lit-tag v="sint.ela"/>
		</lu>
	      </chunk>
	    </out>
	  </when>	
	  <when>
	    <test>
	      <and>
		<equal>
		  <clip pos="1" side="sl" part="a_adv_form_SH"/> <!-- SH = adv.sup -> SL = adv.sint.sup -->
		  <lit-tag v="sup"/>
		</equal>
		<equal>
		  <clip pos="1" side="tl" part="a_adv_addWord"/>
		  <lit-tag v="add_sup"/>
		</equal>
	      </and>
	    </test>	
	    <out>
	      <chunk name="Adv" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <lit v="najbolj"/>	
		  <lit-tag v="adv.sint.sup"/>
		</lu>
		<b/>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_adv"/>
		  <lit-tag v="sint"/>
		</lu>
	      </chunk>
	    </out>
	  </when>
	  <when>
	    <test>
	      <equal>
		<clip pos="1" side="sl" part="a_adv_form_SH"/> <!-- SH = adv.sup -> SL = adv.sint.sup -->
		<lit-tag v="sup"/>
	      </equal>
	    </test>	
	    <out>
	      <chunk name="Adv" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_adv"/>
		  <lit-tag v="sint.sup"/>
		</lu>
	      </chunk>
	    </out>
	  </when>
	  <when>
	    <test>
	      <and>
		<equal>
		  <clip pos="1" side="sl" part="a_adv_form_SH"/> <!-- SH = adv.comp -> SL = adv.sint.comp -->
		  <lit-tag v="comp"/>
		</equal>
		<equal>
		  <clip pos="1" side="tl" part="a_adv_addWord"/>
		  <lit-tag v="add_comp"/>
		</equal>
	      </and>
	    </test>	
	    <out>
	      <chunk name="Adv" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <lit v="bolj"/>	
		  <lit-tag v="adv.sint"/>
		</lu>
		<b/>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_adv"/>
		  <lit-tag v="sint"/>
		</lu>
	      </chunk>
	    </out>
	  </when>
	  <when>
	    <test>
	      <equal>
		<clip pos="1" side="sl" part="a_adv_form_SH"/> <!-- SH = adv.comp -> SL = adv.sint.comp -->
		<lit-tag v="comp"/>
	      </equal>
	    </test>	
	    <out>
	      <chunk name="Adv" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_adv"/>
		  <lit-tag v="sint.comp"/>
		</lu>
	      </chunk>
	    </out>
	  </when>
	  <otherwise> <!-- Else: adv -> adv.sint -->
	    <out>
	      <chunk name="Adv" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_adv"/>
		  <lit-tag v="sint"/>
		</lu>
	      </chunk>
	    </out>
	  </otherwise>
	</choose>
      </action>
    </rule>

    <rule comment="li i -> tudi (li.part.itg i.cnjcoo -> tudi.part)">
      <pattern>
	<pattern-item n="li_part"/>
	<pattern-item n="i_cnjcoo"/>
      </pattern>
      <action>
	<call-macro n="verb_adapter"><with-param pos="2"/></call-macro>
	<out>
	  <chunk name="ChunkName" case="caseFirstWord">
	    <tags>
	      <tag><lit-tag v="VB"/></tag>
	    </tags>
	    <lu>
	      <clip pos="1" side="tl" part="lemh"/> 
	      <lit-tag v="part"/>
	    </lu>	
	  </chunk>
	</out>
      </action>
    </rule>

    <rule comment="vbhaver -> vblex">
      <pattern>
	<pattern-item n="vbhaver"/>
      </pattern>
      <action>
	<call-macro n="firstWord"><with-param pos="1"/></call-macro>
	<choose>
	  <when>
	    <test>
	      <and>
		<equal>
		  <clip pos="1" side="sl" part="a_vrb"/>
		  <lit-tag v="vbhaver"/>
		</equal>
		<equal>
		  <clip pos="1" side="tl" part="a_vrb"/>
		  <lit-tag v="vblex"/>
		</equal>
	      </and>
	    </test>	
	    <out>
	      <chunk name="VbhaverToVblex" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_vrb"/>
		  <clip pos="1" side="tl" part="asp"/>
		  <clip pos="1" side="tl" part="trn"/>
		  <clip pos="1" side="tl" part="tns"/>
		  <clip pos="1" side="tl" part="a_vrb_neg"/>
		  <clip pos="1" side="tl" part="prs"/>
		  <clip pos="1" side="tl" part="nbr"/>
		</lu>
	      </chunk>
	    </out>
	  </when>
	</choose>
      </action>
    </rule>


    <rule comment="noun.voc -> noun.nom">
      <pattern>
	<pattern-item n="nom"/> <!-- Samostalnik -->
      </pattern>
      <action>
	<call-macro n="firstWord"><with-param pos="1"/></call-macro>
	<call-macro n="voc_adapter"><with-param pos="1"/></call-macro>
	<out>
	  <chunk name="Nom" case="caseFirstWord">
	    <tags>
	      <tag><lit-tag v="VB"/></tag>
	    </tags>
	    <lu>
	      <clip pos="1" side="tl" part="whole"/>
	    </lu>
	  </chunk>
	</out>
      </action>
    </rule>

    <rule comment="pr + noun.voc -> pr + noun.nom">
      <pattern>
	<pattern-item n="pr"/>
	<pattern-item n="nom"/> <!-- Samostalnik -->
      </pattern>
      <action>
	<call-macro n="firstWord"><with-param pos="1"/></call-macro>
	<call-macro n="pr_adapter"><with-param pos="1"/></call-macro>
	<call-macro n="voc_adapter"><with-param pos="2"/></call-macro>
	<out>
	  <chunk name="Nom_pr" case="caseFirstWord">
	    <tags>
	      <tag><lit-tag v="VB"/></tag>
	    </tags>
	    <lu>
	      <clip pos="1" side="tl" part="whole"/>
	    </lu>
	    <b/>
	    <lu>
	      <clip pos="2" side="tl" part="whole"/>
	      <!--><lit-tag v="ins"/>-->
	    </lu>
	  </chunk>
	</out>
      </action>
    </rule>

    <rule comment="prn.voc -> prn.nom">
      <pattern>
	<pattern-item n="prns"/>
      </pattern>
      <action>
	<call-macro n="firstWord"><with-param pos="1"/></call-macro>
	<call-macro n="mima_to_m"><with-param pos="1"/></call-macro>
	<call-macro n="voc_adapter"><with-param pos="1"/></call-macro>
	<call-macro n="clitic_m_to_mfn"><with-param pos="1"/></call-macro>
	<choose>
	  <when>
	    <test>
	      <and>
		<equal>
		  <clip pos="1" side="sl" part="lemh"/>
		  <lit v="clitic"/>
		</equal>
		<not><equal><clip pos="1" side="sl" part="a_prn"/><lit-tag v="prn.ref.pers"/></equal></not>
	      </and>
	    </test>
	    <out>
	      <chunk name="CliticRule" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <lit-tag v="prn.emph"/>
		  <clip pos="1" side="tl" part="prs"/>
		  <clip pos="1" side="tl" part="gen"/>
		  <clip pos="1" side="tl" part="nbr"/>
		  <clip pos="1" side="tl" part="cas"/>
		</lu>
	      </chunk>
	    </out>
	  </when>
	  <otherwise>	
	    <out>
	      <chunk name="Prn" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="VB"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="whole"/>
		</lu>
	      </chunk>
	    </out>
	  </otherwise>
	</choose>
      </action>
    </rule>

    <rule comment="Adjectives (.pst -> normal)">
      <pattern>
	<pattern-item n="adj_pst"/>
      </pattern>
      <action>
	<call-macro n="firstWord"><with-param pos="1"/></call-macro>
	<call-macro n="mima_to_m"><with-param pos="1"/></call-macro>
	<out>
	  <chunk name="Adj" case="caseFirstWord">
	    <tags>
	      <tag><lit-tag v="VB"/></tag>
	    </tags>
	    <lu>
	      <clip pos="1" side="tl" part="lemh"/>
	      <clip pos="1" side="tl" part="a_adj"/>
	      <clip pos="1" side="tl" part="gen"/>
	      <clip pos="1" side="tl" part="nbr"/>
	      <clip pos="1" side="tl" part="cas"/>
	      <clip pos="1" side="tl" part="def"/>
	    </lu>
	  </chunk>
	</out>
      </action>
    </rule>

    <rule comment="li + clitic + verb -> clitic + verb">
      <pattern>
	<pattern-item n="li_part"/>
	<pattern-item n="clitic"/>
	<pattern-item n="vblex"/>
      </pattern>
      <action>
	<call-macro n="firstWord"><with-param pos="1"/></call-macro>
	<call-macro n="mima_to_m"><with-param pos="2"/></call-macro>
	<call-macro n="verb_adapter"><with-param pos="3"/></call-macro>
	<choose>
	  <when>
	    <test>
	      <equal>
		<clip pos="2" side="sl" part="gen"/>
		<lit-tag v="m"/>
	      </equal>
	    </test>	
	    <let><clip pos="2" side="tl" part="gen"/><lit-tag v="mfn"/></let>
	  </when>
	</choose>
	<out>
	  <chunk name="Li_Clitic_Vrb" case="caseFirstWord">
	    <tags>
	      <tag><lit-tag v="VB"/></tag>
	    </tags>
	    <lu>
	      <clip pos="2" side="tl" part="lemh"/>
	      <lit-tag v="prn.emph"/>
	      <clip pos="2" side="tl" part="prs"/>
	      <clip pos="2" side="tl" part="gen"/>
	      <clip pos="2" side="tl" part="nbr"/>
	      <clip pos="2" side="tl" part="cas"/>
	    </lu>
	    <b/>
	    <lu>
	      <clip pos="3" side="tl" part="lemh"/>
	      <clip pos="3" side="tl" part="a_vrb"/>
	      <clip pos="3" side="tl" part="asp"/>
	      <clip pos="3" side="tl" part="trn"/>
	      <lit-tag v="past.m"/>
	      <clip pos="3" side="tl" part="nbr"/>
	    </lu>
	  </chunk>
	</out>
      </action>
    </rule>

    <rule comment="li + verb.lp -> verb.pres">
      <pattern>
	<pattern-item n="li_part"/>
	<pattern-item n="vb_lp"/>
      </pattern>
      <action>
	<call-macro n="firstWord"><with-param pos="1"/></call-macro>
	<call-macro n="verb_adapter"><with-param pos="2"/></call-macro>
	<out>
	  <chunk name="LiVBlp" case="caseFirstWord">
	    <tags>
	      <tag><lit-tag v="VB"/></tag>
	    </tags>
	    <lu>
	      <clip pos="2" side="tl" part="lemh"/>
	      <clip pos="2" side="tl" part="a_vrb"/>
	      <clip pos="2" side="tl" part="asp"/>
	      <clip pos="2" side="tl" part="trn"/>
	      <lit-tag v="past"/>
	      <clip pos="2" side="sl" part="gen"/>
	      <clip pos="2" side="tl" part="nbr"/>
	    </lu>
	  </chunk>
	</out>
      </action>
    </rule>

    <rule comment="clitic + nom + verb (se mati smeje) -> noun + clitic + verb (mati se smeje)">
      <pattern>
	<pattern-item n="clitic"/>
	<pattern-item n="nom"/>
	<pattern-item n="vblex"/>
      </pattern>
      <action>
	<call-macro n="firstWord"><with-param pos="1"/></call-macro>
	<call-macro n="verb_adapter"><with-param pos="3"/></call-macro>
	<out>
	  <chunk name="Rule" case="caseFirstWord">
	    <tags>
	      <tag><lit-tag v="VB"/></tag>
	    </tags>
	    <lu>
	      <clip pos="2" side="tl" part="whole"/>
	    </lu>
	    <b/>
	    <lu>
	      <clip pos="1" side="tl" part="whole"/>
	    </lu>
	    <b/>
	    <lu>
	      <clip pos="3" side="tl" part="whole"/>
	    </lu>
	  </chunk>
	</out>
      </action>
    </rule>

    <rule comment="biti + li = je">
      <pattern>
	<pattern-item n="biti_clt"/>
	<pattern-item n="li_part"/>
      </pattern>
      <action>
	<call-macro n="firstWord"><with-param pos="1"/></call-macro>
	<out>
	  <chunk name="BitiLi_Je" case="caseFirstWord">
	    <tags>
	      <tag><lit-tag v="VB"/></tag>
	    </tags>
	    <lu>
	      <clip pos="1" side="tl" part="lemh"/>
	      <clip pos="1" side="tl" part="a_vrb"/>
	      <lit-tag v="pres"/>
	      <clip pos="1" side="tl" part="prs"/>
	      <clip pos="1" side="tl" part="nbr"/>
	    </lu>
	  </chunk>
	</out>
      </action>
    </rule>

    <rule comment="moči + biti = mogoče">
      <pattern>
	<pattern-item n="moći"/>
	<pattern-item n="biti"/>
      </pattern>
      <action>
	<call-macro n="firstWord"><with-param pos="1"/></call-macro>
	<out>
	  <chunk name="MoćiBiti-Mogoče" case="caseFirstWord">
	    <tags>
	      <tag><lit-tag v="VB"/></tag>
	    </tags>
	    <lu>
	      <lit v="mogoče"/>
	      <lit-tag v="adv.sint"/>
	    </lu>
	  </chunk>
	</out>
      </action>
    </rule>

    <rule comment="ne + biti => biti.neg (vbser)">
      <pattern>
	<pattern-item n="ne_part"/>
	<pattern-item n="biti"/>
      </pattern>
      <action>
	<call-macro n="firstWord"><with-param pos="1"/></call-macro>
	<out>
	  <chunk name="NeBiti-BitiNeg" case="caseFirstWord">
	    <tags>
	      <tag><lit-tag v="VB"/></tag>
	    </tags>
	    <lu>
	      <clip pos="2" side="tl" part="lemh"/>
	      <clip pos="2" side="tl" part="a_vrb"/>
	      <clip pos="2" side="tl" part="tns"/>
	      <clip pos="1" side="sl" part="a_vrb_neg"/>
	      <clip pos="2" side="tl" part="prs"/>
	      <clip pos="2" side="tl" part="nbr"/>
	    </lu>
	  </chunk>
	</out>
      </action>
    </rule>

    <rule comment="izašao je -> je izstopil">
      <pattern>
	<pattern-item n="cm"/>
	<pattern-item n="vblex"/>
	<pattern-item n="biti_clt"/>
      </pattern>
      <action>
	<call-macro n="firstWord"><with-param pos="1"/></call-macro>
	<out>
	  <chunk name="CM-VBlexBiti-BitiVblex" case="caseFirstWord">
	    <tags>
	      <tag><lit-tag v="VB"/></tag>
	    </tags>
	    <lu>
	      <clip pos="1" side="tl" part="whole"/>
	    </lu>
	    <b/>
	    <lu>
	      <clip pos="3" side="tl" part="whole"/>
	    </lu>
	    <b/>
	    <lu>
	      <clip pos="2" side="tl" part="lemh"/>
	      <clip pos="2" side="tl" part="a_vrb"/>
	      <clip pos="2" side="tl" part="asp"/>
	      <clip pos="2" side="tl" part="trn"/>
	      <lit-tag v="past"/>
	      <clip pos="2" side="sl" part="gen"/>
	      <clip pos="2" side="tl" part="nbr"/>
	    </lu>	
	  </chunk>
	</out>
      </action>
    </rule>

    <rule comment=", žena je upitala -> je ženska vprašala">
      <pattern>
	<pattern-item n="cm"/>
	<pattern-item n="nom"/>
	<pattern-item n="biti_clt"/>
	<pattern-item n="vblex"/>
      </pattern>
      <action>
	<call-macro n="firstWord"><with-param pos="1"/></call-macro>
	<call-macro n="voc_adapter"><with-param pos="2"/></call-macro>
	<out>
	  <chunk name="CM_Nom_Biti_Vblex-CM_Biti_Nom_Vblex" case="caseFirstWord">
	    <tags>
	      <tag><lit-tag v="VB"/></tag>
	    </tags>
	    <lu>
	      <clip pos="1" side="tl" part="whole"/>
	    </lu>
	    <b/>
	    <lu>
	      <clip pos="3" side="tl" part="whole"/>
	    </lu>
	    <b/>
	    <lu>
	      <clip pos="2" side="tl" part="whole"/>
	    </lu>
	    <b/>
	    <lu>
	      <clip pos="4" side="tl" part="lemh"/>
	      <clip pos="4" side="tl" part="a_vrb"/>
	      <clip pos="4" side="tl" part="asp"/>
	      <clip pos="4" side="tl" part="trn"/>
	      <lit-tag v="past"/>
	      <clip pos="4" side="sl" part="gen"/>
	      <clip pos="4" side="tl" part="nbr"/>
	    </lu>	
	  </chunk>
	</out>
      </action>
    </rule>

    <rule comment="li_part + adj + adv -> adv + adj (li samo tu -> tukaj samo)"> <!-- TO DO: macro for BOLJ, NAJBOLJ, PREVEČ adverb -->
      <pattern>
	<pattern-item n="li_part"/>
	<pattern-item n="adj"/>
	<pattern-item n="adv"/>
      </pattern>
      <action>
	<call-macro n="firstWord"><with-param pos="1"/></call-macro>
	<call-macro n="mima_to_m"><with-param pos="2"/></call-macro>
	<call-macro n="voc_adapter"><with-param pos="2"/></call-macro>
	<call-macro n="adverb_adapter"><with-param pos="3"/></call-macro>
	<out>
	  <chunk name="LiAdjAdv-AdvAdj" case="caseFirstWord">
	    <tags>
	      <tag><lit-tag v="VB"/></tag>
	    </tags>
	    <b/>
	    <lu>
	      <clip pos="2" side="tl" part="lemh"/>
	      <clip pos="2" side="tl" part="a_adj"/>
	      <clip pos="2" side="tl" part="gen"/>
	      <clip pos="2" side="tl" part="nbr"/>
	      <clip pos="2" side="tl" part="cas"/>
	      <clip pos="2" side="tl" part="def"/>
	    </lu>
	  </chunk>
	</out>
      </action>
    </rule>


  </section-rules>
</transfer>
