<?xml version="1.0" encoding="utf-8"?>
<transfer default="chunk">

  <section-def-cats>
    <def-cat n="nom">
      <cat-item tags="n.*"/>
      <cat-item tags="np.*"/>
    </def-cat>
    <def-cat n="nom_gen">
      <cat-item tags="n.*.*.gen"/>
      <cat-item tags="n.*.*.gen.*"/>
    </def-cat>
    <def-cat n="nom_ins">
      <cat-item tags="n.*.*.ins"/>
      <cat-item tags="n.*.*.ins.*"/>
    </def-cat>
    <def-cat n="nom_loc">
      <cat-item tags="n.*.*.loc"/>
      <cat-item tags="n.*.*.loc.*"/>
    </def-cat>
    <def-cat n="nom_or_np">
      <cat-item tags="n.*"/>
      <cat-item tags="np.*"/>
    </def-cat>
    <def-cat n="np">
      <cat-item tags="np.*"/>
    </def-cat>
    <def-cat n="np_nom">
      <cat-item tags="np.*.*.*.nom"/>
    </def-cat>
    <def-cat n="np_nom_non_cog_ant">
      <cat-item tags="np.top.*.*.nom"/>
      <cat-item tags="np.al.*.*.nom"/>
    </def-cat>
    <def-cat n="np_gen">
      <cat-item tags="np.*.*.*.gen"/>
    </def-cat>
    <def-cat n="np_ins">
      <cat-item tags="np.*.*.*.ins"/>
    </def-cat>
    <def-cat n="np_loc">
      <cat-item tags="np.*.*.*.loc"/>
    </def-cat>
    <def-cat n="vb_lp">
      <cat-item tags="vbser.lp.*"/>
      <cat-item tags="vbser.past.*"/>
      <cat-item tags="vblex.*.*.past.*"/>
      <cat-item tags="vblex.*.*.lp.*"/>
      <cat-item tags="vbhaver.*.*.lp.*"/>
      <cat-item tags="vbmod.lp.*"/>
    </def-cat>
    <def-cat n="vbser_lp">
      <cat-item tags="vbser.lp.*"/>
    </def-cat>
    <def-cat n="vbser_past">
      <cat-item tags="vbser.clt.pres.*"/>
      <cat-item tags="vbser.pres.*"/>
    </def-cat>
    <def-cat n="vbser_past_clt">
      <cat-item tags="vbser.clt.*"/>
    </def-cat>
    <def-cat n="vbser_past_emph">
      <cat-item tags="vbser.pres.*"/>
    </def-cat>
    <def-cat n="vbser_cond">
      <cat-item tags="vbser.clt.aor.*"/>
    </def-cat>
    <def-cat n="verb">
      <cat-item tags="vblex.*"/>
      <cat-item tags="vbser.*"/>
      <cat-item tags="vbmod.*"/>
      <cat-item tags="vbhaver.*"/>
    </def-cat>
    <def-cat n="vbmod">
      <cat-item tags="vbmod.*"/>
    </def-cat>
    <def-cat n="vbhaver">
      <cat-item tags="vbhaver.*"/>
    </def-cat>
    <def-cat n="vblex">
      <cat-item tags="vblex.*"/>
    </def-cat>
    <def-cat n="vblex_ref">
      <cat-item tags="vblex.*.ref.*"/>
    </def-cat>
    <def-cat n="vbser">
      <cat-item tags="vbser.*"/>
    </def-cat>
    <def-cat n="vbpp">
      <cat-item tags="vblex.*.*.pp.*"/>
    </def-cat>
    <def-cat n="vbinf">
      <cat-item tags="vblex.*.*.inf"/>
      <cat-item tags="vblex.*.*.inf.*"/>
      <cat-item tags="vbmod.inf"/>
      <cat-item tags="vbmod.inf.*"/>
      <cat-item tags="vbhaver.*.*.inf"/>
      <cat-item tags="vbhaver.*.*.inf.*"/>
      <cat-item tags="vbser.inf"/>
      <cat-item tags="vbser.inf.*"/>
    </def-cat>
    <def-cat n="vbsupn">
      <cat-item tags="vbser.*.*.supn"/>
      <cat-item tags="vblex.*.*.supn"/>
      <cat-item tags="vbmod.*.*.supn"/>
      <cat-item tags="vbhaver.*.*.supn"/>
    </def-cat>
    <def-cat n="future">
      <cat-item lemma="biti" tags="vbser.fut.*"/>
    </def-cat>
    <def-cat n="vbfutI">
      <cat-item lemma="htjeti" tags="vbmod.clt.futI.*"/>
    </def-cat>
    <def-cat n="vbhtjeti">
      <cat-item lemma="htjeti" tags="vbmod.pres.*"/>
      <cat-item lemma="htjeti" tags="vbmod.pii.*"/>
    </def-cat>
    <def-cat n="prns"><!--All pronouns-->
      <cat-item tags="prn"/>
      <cat-item tags="prn.*"/>
    </def-cat>
    <def-cat n="prn"><!--Not demonstrative, and not reflexive possesive se-->
      <cat-item tags="prn.pers.*"/>
      <cat-item tags="prn.pos.*"/>
      <cat-item tags="prn.ref.pos.*"/>
      <cat-item tags="prn.itg"/>
      <cat-item tags="prn.itg.*"/>
      <cat-item tags="prn.rel"/>
      <cat-item tags="prn.rel.*"/>
      <cat-item tags="prn.ind"/>
      <cat-item tags="prn.ind.*"/>
      <cat-item tags="prn.neg"/>
      <cat-item tags="prn.neg.*"/>
      <cat-item tags="prn.tot"/>
      <cat-item tags="prn.tot.*"/>
    </def-cat>
    <def-cat n="prn_rel">
      <cat-item tags="prn.rel.*"/>
    </def-cat>
    <def-cat n="prn_tot">
      <cat-item tags="prn.tot"/>
      <cat-item tags="prn.tot.*"/>
    </def-cat>
    <def-cat n="prn_dem">
      <cat-item tags="prn.dem.*"/>
    </def-cat>
    <def-cat n="prn_ref_pers">
      <cat-item tags="prn.ref.pers.*"/>
    </def-cat>
    <def-cat n="rel_prn">
      <cat-item tags="prn.rel.*"/>
    </def-cat>
    <def-cat n="num">
      <cat-item tags="num"/>
      <cat-item tags="num.*"/>
    </def-cat>
    <def-cat n="ord">
      <cat-item tags="num.ord.*"/>
    </def-cat>
    <def-cat n="adv">
      <cat-item tags="adv"/>
      <cat-item tags="adv.*"/>
    </def-cat>
    <def-cat n="adj_ADV">
      <cat-item tags="adj.pst.*.sg.acc.*"/>
    </def-cat>
    <def-cat n="adj">
      <cat-item tags="adj.*"/>
    </def-cat>
    <def-cat n="adj_pst">
      <cat-item tags="adj.pst.*"/>
    </def-cat>
    <def-cat n="adj_pss_sfx">
      <cat-item lemma="pos" tags="adj.*"/>
    </def-cat>
    <def-cat n="adj_comp">
      <cat-item tags="adj.comp.*"/>
    </def-cat>
    <def-cat n="adj_sup">
      <cat-item tags="adj.sup.*"/>
    </def-cat>
    <def-cat n="adj_ssup">
      <cat-item tags="adj.ssup.*"/>
    </def-cat>
    <def-cat n="adj_gen">
      <cat-item tags="adj.*.*.*.gen.*"/>
    </def-cat>
    <def-cat n="adj_ins">
      <cat-item tags="adj.*.*.*.ins.*"/>
    </def-cat>
    <def-cat n="pr">
      <cat-item tags="pr"/>
      <cat-item tags="pr.*"/>
    </def-cat>
    <def-cat n="det">
      <cat-item tags="det"/>
      <cat-item tags="det.*"/>
    </def-cat>
    <def-cat n="exp">
      <cat-item tags="part.exp"/>
    </def-cat>
    <def-cat n="ne_part">
      <cat-item lemma ="ne" tags="part.neg"/>
    </def-cat>
    <def-cat n="li_part">
      <cat-item lemma ="li" tags="part.itg"/>
    </def-cat>
    <def-cat n="cnjcoo">
      <cat-item tags="cnjcoo"/>
    </def-cat>
    <def-cat n="i_cnjcoo">
      <cat-item lemma ="i" tags="cnjcoo"/>
    </def-cat>
    <def-cat n="kako_adv">
      <cat-item lemma="kako" tags="adv"/>
      <cat-item lemma="kako" tags="cnjsub"/>
    </def-cat>
    <def-cat n="vblex_lp">
      <cat-item tags="vblex.*.*.lp.*"/>
      <cat-item tags="vbhaver.*.*.lp.*"/>
      <cat-item tags="vbmod.lp.*"/>
    </def-cat>
    <def-cat n="clitic">
      <cat-item lemma="clitic" tags="prn.*"/>
    </def-cat>
    <def-cat n="biti">
      <cat-item lemma="biti" tags="vbser.*"/>
      <cat-item lemma="biti" tags="vblex.*"/>
      <cat-item lemma="biti" tags="vbmod.*"/>
    </def-cat>
    <def-cat n="biti_clt">
      <cat-item lemma="biti" tags="vbser.clt.*"/>
    </def-cat>
    <def-cat n="moći">
      <cat-item lemma="moći" tags="vbser.*"/>
      <cat-item lemma="moći" tags="vblex.*"/>
      <cat-item lemma="moći" tags="vbmod.*"/>
    </def-cat>
    <def-cat n="cm">
      <cat-item lemma="," tags="cm"/>
    </def-cat>
  </section-def-cats>

  <section-def-attrs>
    <def-attr n="a_nom">
      <attr-item tags="n"/>
      <attr-item tags="np"/>
      <attr-item tags="np.ant"/>
      <attr-item tags="np.top"/>
      <attr-item tags="np.cog"/>
      <attr-item tags="np.al"/>
    </def-attr>

    <def-attr n="a_adv">
      <attr-item tags="adv"/>
    </def-attr>

    <def-attr n="a_num">
      <attr-item tags="num"/>
    </def-attr>

    <def-attr n="a_prp">
      <attr-item tags="pr"/>
    </def-attr>
    <def-attr n="a_vrb">
      <attr-item tags="vblex"/>
      <attr-item tags="vbmod"/>
      <attr-item tags="vbser"/>
      <attr-item tags="vbhaver"/>
    </def-attr>

    <def-attr n="a_adj">
      <attr-item tags="adj"/>
    </def-attr>

    <def-attr n="deg">
      <attr-item tags="pst"/>
      <attr-item tags="comp"/>     
      <attr-item tags="sup"/>     
      <attr-item tags="ssup"/>
      <attr-item tags="ela"/>
    </def-attr>

    <def-attr n="a_prn">
      <attr-item tags="prn"/>
      <attr-item tags="prn.dem"/>
      <attr-item tags="prn.enc"/>
      <attr-item tags="prn.itg"/>
      <attr-item tags="prn.ref.pers"/>
    </def-attr>

    <def-attr n="gen">
      <attr-item tags="m"/>
      <attr-item tags="mi"/>
      <attr-item tags="ma"/>
      <attr-item tags="f"/>
      <attr-item tags="nt"/>
      <attr-item tags="mf"/>
      <attr-item tags="mfn"/>
      <attr-item tags="GD"/>
    </def-attr>

    <def-attr n="tns">	
      <attr-item tags="inf"/>
      <attr-item tags="pri"/>
      <attr-item tags="pii"/>
      <attr-item tags="imp"/>
      <attr-item tags="aor"/>
      <attr-item tags="fti"/>
      <attr-item tags="pres"/>
      <attr-item tags="pp"/>
      <attr-item tags="lp"/>
      <attr-item tags="supn"/>
      <attr-item tags="past"/>
      <attr-item tags="fut"/>
      <attr-item tags="futI"/>
      <attr-item tags="futII"/>
    </def-attr>

    <def-attr n="prs">
      <attr-item tags="p1"/>
      <attr-item tags="p2"/>
      <attr-item tags="p3"/>
    </def-attr>

    <def-attr n="nbr">
      <attr-item tags="du"/>
      <attr-item tags="sp"/>
      <attr-item tags="sg"/>
      <attr-item tags="pl"/>
    </def-attr>

    <def-attr n="cas">
      <attr-item tags="nom"/>
      <attr-item tags="acc"/>
      <attr-item tags="dat"/>
      <attr-item tags="gen"/>
      <attr-item tags="loc"/>
      <attr-item tags="ins"/>
      <attr-item tags="voc"/>
    </def-attr>

    <def-attr n="a_adv_form_SL">
      <attr-item tags="sint"/>
      <attr-item tags="sint.comp"/>
      <attr-item tags="sint.sup"/>
      <attr-item tags="sint.ela"/>
    </def-attr>

    <def-attr n="trn">
      <attr-item tags="tv"/>
      <attr-item tags="iv"/>
      <attr-item tags="ref"/>
    </def-attr>

    <def-attr n="asp">
      <attr-item tags="perf"/>
      <attr-item tags="imperf"/>
    </def-attr>

    <def-attr n="def">
      <attr-item tags="def"/>
      <attr-item tags="ind"/>
    </def-attr>

  </section-def-attrs>

  <section-def-vars>
    <def-var n="number"/>
    <def-var n="genere"/>
    <def-var n="caseFirstWord"/>	
    <def-var n="EOS" v="true"/>
  </section-def-vars>

  <section-def-macros>

    <def-macro n="pr_adapter" npar="1">
      <choose>
	<when> <!-- For the few cases u se, na se, poda se..., when the case is not marked on the preposition in analysis -->
	  <test>
	    <and>
	      <or>
		<equal><clip pos="1" side="tl" part="lem"/><lit v="za"/></equal> 
		<equal><clip pos="1" side="tl" part="lem"/><lit v="na"/></equal> 
		<equal><clip pos="1" side="tl" part="lem"/><lit v="u"/></equal> 
	      </or>
	      <not>
		<or>
		  <equal><clip pos="1" side="tl" part="cas"/><lit-tag v="acc"/></equal> 
		  <equal><clip pos="1" side="tl" part="cas"/><lit-tag v="loc"/></equal> 
		  <equal><clip pos="1" side="tl" part="cas"/><lit-tag v="ins"/></equal> 
		  <equal><clip pos="1" side="tl" part="cas"/><lit-tag v="gen"/></equal> 
		</or>
	      </not>
	    </and>
	  </test>
	  <let>
	    <clip pos="1" side="tl" part="whole"/>
	    <concat>
	      <clip pos="1" side="tl" part="lemh"/>
	      <clip pos="1" side="tl" part="a_prp"/>
	      <lit-tag v="acc"/>
	      <clip pos="1" side="tl" part="lemq"/>
	    </concat>
	  </let>
	</when>
      </choose>
    </def-macro>

    <def-macro n="dual_adapter" npar="1">
      <choose>
	<when>
	  <test>
	    <equal><clip pos="1" side="sl" part="nbr"/><lit-tag v="du"/></equal> 
	  </test>
	  <choose>
	    <!-- nom/acc.dual -> gen.sg -->
	    <when>
	      <test>
		<or>
		  <equal><clip pos="1" side="sl" part="cas"/><lit-tag v="nom"/></equal> 
		  <equal><clip pos="1" side="sl" part="cas"/><lit-tag v="acc"/></equal> 
		</or>
	      </test>
	      <let><clip pos="1" side="tl" part="cas"/><lit-tag v="gen"/></let>
	      <let><clip pos="1" side="tl" part="nbr"/><lit-tag v="sg"/></let>
	    </when>
	    <!-- gen.dual -> gen.pl -->
	    <when>
	      <test>
		<equal><clip pos="1" side="sl" part="cas"/><lit-tag v="gen"/></equal> 
	      </test>
	      <let><clip pos="1" side="tl" part="nbr"/><lit-tag v="pl"/></let>
	    </when>
	    <!-- dat/loc/ins.du -> dat/loc/ins.pl -->
	    <when>
	      <test>
		<or>
		  <equal><clip pos="1" side="sl" part="cas"/><lit-tag v="dat"/></equal> 
		  <equal><clip pos="1" side="sl" part="cas"/><lit-tag v="loc"/></equal> 
		  <equal><clip pos="1" side="sl" part="cas"/><lit-tag v="ins"/></equal> 
		</or>
	      </test>
	      <let><clip pos="1" side="tl" part="nbr"/><lit-tag v="pl"/></let>
	    </when>
	    <when><!--If we're dealing with a verb, we just do the shift to plural-->
	      <test>
		<or>
		  <equal><clip pos="1" side="tl" part="a_vrb"/><lit-tag v="vblex"/></equal> 
		  <equal><clip pos="1" side="tl" part="a_vrb"/><lit-tag v="vbmod"/></equal> 
		  <equal><clip pos="1" side="tl" part="a_vrb"/><lit-tag v="vbhaver"/></equal> 
		  <equal><clip pos="1" side="tl" part="a_vrb"/><lit-tag v="vbaux"/></equal> 
		  <equal><clip pos="1" side="tl" part="a_vrb"/><lit-tag v="vbser"/></equal> 
		</or>
	      </test>
	      <let><clip pos="1" side="tl" part="nbr"/><lit-tag v="pl"/></let>
	    </when>
	  </choose>
	</when>
      </choose>
      <choose><!--If it's one of the nouns different singular/plural-->
	<when>
	  <test><!--If it's oko<nt><sg>/oči<f><pl>-->
	    <equal><clip pos="1" side="tl" part="lemh"/><lit v="oko"/></equal> 
	  </test>
	  <choose>
	    <when>
	      <test>
		<equal><clip pos="1" side="tl" part="nbr"/><lit v="pl"/></equal> 
	      </test>
	      <let><clip pos="1" side="tl" part="gen"/><lit-tag v="f"/></let>
	    </when>
	    <otherwise>
	      <let><clip pos="1" side="tl" part="gen"/><lit-tag v="nt"/></let>
	    </otherwise>
	  </choose>
	</when>
      </choose>
    </def-macro>
    
    <def-macro n="m2mima" npar="1">
      <choose><!--temporary, changes the <m> gender to <mi>-->
	<when>
	  <test>
	    <equal><clip pos="1" side="sl" part="gen"/><lit-tag v="m"/></equal> 
	  </test>
	  <let><clip pos="1" side="tl" part="gen"/><lit-tag v="mi"/></let>
	</when>
      </choose>
    </def-macro>

    <def-macro n="to_infinitive" npar="1">
      <!--Turns a verb into infinitive, works with verbs only-->
      <let>
	<clip pos="1" side="tl" part="whole"/>
	<concat>
	  <clip pos="1" side="tl" part="lemh"/>
	  <clip pos="1" side="tl" part="a_vrb"/>
	  <clip pos="1" side="tl" part="asp"/>
	  <clip pos="1" side="tl" part="trn"/>
	  <lit-tag v="inf"/>
	  <clip pos="1" side="tl" part="lemq"/>
	</concat>
      </let>
      
    </def-macro>

    <def-macro n="verb_adapter" npar="1">
      <call-macro n="dual_adapter"><with-param pos="1"/></call-macro>
      <choose>
	<when>      <!-- Supine to infinitive -->
	  <test><equal><clip pos="1" side="sl" part="tns"/><lit-tag v="supn"/></equal></test>
	  <let><clip pos="1" side="tl" part="tns"/><lit-tag v="inf"/></let>
	</when>
	<when>
	  <test><equal><clip pos="1" side="sl" part="tns"/><lit-tag v="pp"/></equal></test>
	  <call-macro n="m2mima"><with-param pos="1"/></call-macro>
	  <let><clip pos="1" side="tl" part="trn"/><lit-tag v="tv"/></let><!--This is evil, but intransitive verbs have no <pp> -->
	</when>
	<when><!-- Past to lp -->
	  <test><equal><clip pos="1" side="sl" part="tns"/><lit-tag v="past"/></equal></test>
	  <let><clip pos="1" side="tl" part="tns"/><lit-tag v="lp"/></let>
	</when>	
	<when><!--Future to sh futureI-->
	  <test>
	    <equal><clip pos="1" side="sl" part="tns"/><lit-tag v="fut"/></equal>
	  </test>
	  <let>
	    <clip pos="1" side="tl" part="whole"/>
	    <concat>
	      <lit v="htjeti"/>
	      <lit-tag v="vbmod"/>
	      <lit-tag v="clt"/>
	      <lit-tag v="futI"/>
	      <clip pos="1" side="tl" part="prs"/>
	      <clip pos="1" side="tl" part="nbr"/>
	    </concat>
	  </let>
	</when>
      </choose>
    </def-macro>

    <def-macro n="nom_adapter" npar="1">
      <call-macro n="dual_adapter"><with-param pos="1"/></call-macro>
      <choose>
	<when>
	  <test>
	    <equal><clip pos="1" side="tl" part="a_adj"/><lit-tag v="adj"/></equal>
	    <!--Do absolutely nothing if it's an adjective-->
	  </test>
	</when>
	<otherwise>
	  <let><!--For multiwords with declension at the beginning (and all other stuff)-->
	    <clip pos="1" side="tl" part="whole"/>
	    <concat>
	      <clip pos="1" side="tl" part="lemh"/>
	      <clip pos="1" side="tl" part="a_nom"/>
	      <clip pos="1" side="tl" part="gen"/>
	      <clip pos="1" side="tl" part="nbr"/>
	      <clip pos="1" side="tl" part="cas"/>
	      <clip pos="1" side="tl" part="lemq"/>
	    </concat>
	  </let>
	</otherwise>
      </choose>
    </def-macro>

    <def-macro n="prn_adapter" npar="1">
      <call-macro n="dual_adapter"><with-param pos="1"/></call-macro>
      <choose>
	<when><!--For the le-tak etc. pronouns-->
	  <test>
	  <or>
	    <equal><clip pos="1" side="tl" part="lem"/><lit v="le-oni"/></equal>
	    <equal><clip pos="1" side="tl" part="lem"/><lit v="le-ta"/></equal>
	    <equal><clip pos="1" side="tl" part="lem"/><lit v="le-tak"/></equal>
	    <equal><clip pos="1" side="tl" part="lem"/><lit v="le-takšen"/></equal>
	    <equal><clip pos="1" side="tl" part="lem"/><lit v="le-tisti"/></equal>
	  </or>
	  </test>
	  <let>
	    <clip pos="1" side="tl" part="whole"/>
	    <concat>
	      <lit v="samo"/>
	      <lit-tag v="adv"/>
	      <b/>
	      <clip pos="1" side="tl" part="whole"/>
	    </concat>
	  </let>
	</when>
	<when>
	  <test>
	    <equal><clip pos="1" side="tl" part="a_prn"/><lit-tag v="prn.ref.pers"/></equal>
	  </test>
	  <let>
	    <clip pos="1" side="tl" part="cas"/>
	    <lit-tag v="acc"/>
	  </let>
	</when>
      </choose>
      <choose>			
	<when>
	  <test>
	    <and>
	      <not><!--If we're not dealing with unigender stuff-->
		<equal><clip pos="1" side="tl" part="gen"/><lit-tag v="mfn"/></equal>
	      </not>
	      <not><!-- And it's not one of the few prns in sh that have <m> -->
		<or>
		  <equal><clip pos="1" side="tl" part="lem"/><lit v="clitic"/></equal>
		  <equal><clip pos="1" side="tl" part="lem"/><lit v="free"/></equal>
		</or>
	      </not>
	      <not><!-- And it's not already with mi/ma -->
		<or>
		  <equal><clip pos="1" side="tl" part="gen"/><lit-tag v="mi"/></equal>
		  <equal><clip pos="1" side="tl" part="gen"/><lit-tag v="ma"/></equal>
		</or>
	      </not>
	    </and>
	  </test>
	  <call-macro n="m2mima"><with-param pos="1"/></call-macro>
	</when>
      </choose>
    </def-macro>

    <def-macro n="adj_adapter" npar="1">
      <call-macro n="dual_adapter"><with-param pos="1"/></call-macro>      
      <call-macro n="m2mima"><with-param pos="1"/></call-macro>      
      <choose>
	<when><!-- Only positive and <ssup> (elative, absolutive superlative) can be def/ind-->
	  <test>
	    <or>
	      <equal><clip pos="1" side="sl" part="deg"/><lit-tag v="sup"/></equal>
	      <equal><clip pos="1" side="sl" part="deg"/><lit-tag v="comp"/></equal>
	    </or> 
	  </test>
	  <let>
	    <clip pos="1" side="tl" part="whole"/>
	    <concat>
	      <clip pos="1" side="tl" part="lemh"/>
	      <clip pos="1" side="tl" part="a_adj"/>
	      <clip pos="1" side="tl" part="deg"/>
	      <clip pos="1" side="tl" part="gen"/>
	      <clip pos="1" side="tl" part="nbr"/>
	      <clip pos="1" side="tl" part="cas"/>
	      <clip pos="1" side="tl" part="lemq"/>
	    </concat>
	  </let>
	</when>	
      </choose>
    </def-macro>


    <def-macro n="firstWord" npar="1"><!--nova versió 8-febr-08  -->
      <choose>
	<when>
	  <test>
	    <equal> 
	      <var n="EOS"/>
	      <lit v="true"/>
	    </equal> 
	  </test>
	  <let>
	    <var n="caseFirstWord"/>
	    <lit v="Aa"/>
	  </let>
	</when>
	<otherwise> 
	  <let>
	    <var n="caseFirstWord"/>
	    <lit v="aa"/>
	  </let>
	</otherwise>
      </choose>
      <let>
	<var n="EOS"/>
	<lit v="false"/>
      </let>
    </def-macro>

  </section-def-macros>


  <section-rules>

    <!-- Sintagmas nominales -->

    <rule comment="nom">
      <pattern>
	<pattern-item n="nom"/>
      </pattern>
      <action>
	<call-macro n="nom_adapter"><with-param pos="1"/></call-macro>
	<out>
	  <chunk name="nom" case="caseFirstWord">
	    <tags>
	      <tag><lit-tag v="SN"/></tag>
	      <tag><clip pos="1" side="tl" part="gen"/></tag>
	      <tag><clip pos="1" side="tl" part="nbr"/></tag>
	      <tag><lit-tag v="nom"/></tag>
	    </tags>
	    <lu>
	      <clip pos="1" side="tl" part="whole"/>
	    </lu>
	  </chunk>
	</out>
      </action>
    </rule>

    <rule comment="pr">
      <pattern>
	<pattern-item n="pr"/>
      </pattern>
      <action>
	<call-macro n="pr_adapter"><with-param pos="1"/></call-macro>
	<out>
	  <chunk name="prep" case="caseFirstWord">
	    <tags>
	      <tag><lit-tag v="SP"/></tag>
	      <tag><lit-tag v="nom"/></tag>
	    </tags>
	    <lu>
	      <clip pos="1" side="tl" part="whole"/>
	    </lu>
	  </chunk>
	</out>
      </action>
    </rule>

    <rule comment="num">
      <pattern>
	<pattern-item n="num"/>
      </pattern>
      <action>
	<out>
	  <chunk name="num" case="caseFirstWord">
	    <tags>
	      <tag><clip pos="1" side="tl" part="gen"/></tag>
	      <tag><clip pos="1" side="tl" part="nbr"/></tag>
	      <tag><lit-tag v="nom"/></tag>
	    </tags>
	    <lu>
	      <clip pos="1" side="tl" part="whole"/>	 
	    </lu>
	  </chunk>
	</out>
      </action>
    </rule>

    <rule comment="cnjcoo">
      <pattern>
	<pattern-item n="cnjcoo"/>
      </pattern>
      <action>
	<out>
	  <chunk name="cnjcoo" case="caseFirstWord">
	    <tags>
	      <tag><clip pos="1" side="tl" part="tags"/></tag>                
	    </tags>
	    <lu>
	      <clip pos="1" side="tl" part="whole"/>
	    </lu>
	  </chunk>
	</out>
      </action>
    </rule>

    <!-- Added by Aleš -->
    <rule comment="adverbs">
      <pattern>
	<pattern-item n="adv"/>
      </pattern>
      <action>
	<call-macro n="firstWord"><with-param pos="1"/></call-macro>
	<choose>
	  <when>
	    <test>
	      <equal>
		<clip pos="1" side="sl" part="a_adv_form_SL"/> <!-- SL = adv.sint.ela -> SH = adv.ssup -->
		<lit-tag v="sint.ela"/>
	      </equal>
	    </test>	
	    <out>
	      <chunk name="adv" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="V"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_adv"/>
		  <lit-tag v="ssup"/>
		</lu>
	      </chunk>
	    </out>
	  </when>
	  <when>
	    <test>
	      <equal>
		<clip pos="1" side="sl" part="a_adv_form_SL"/> <!-- SL = adv.sint.sup -> SH = adv.sup -->
		<lit-tag v="sint.sup"/>
	      </equal>
	    </test>	
	    <out>
	      <chunk name="adv" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="V"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_adv"/>
		  <lit-tag v="sup"/>
		</lu>
	      </chunk>
	    </out>
	  </when>
	  <when>
	    <test>
	      <equal>
		<clip pos="1" side="sl" part="a_adv_form_SL"/> <!-- SL = adv.sint.comp -> SH = adv.comp -->
		<lit-tag v="sint.comp"/>
	      </equal>
	    </test>	
	    <out>
	      <chunk name="adv" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="V"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_adv"/>
		  <lit-tag v="comp"/>
		</lu>
	      </chunk>
	    </out>
	  </when>
	  <otherwise> <!-- Else: adv.sint -> adv -->
	    <out>
	      <chunk name="adv" case="caseFirstWord">
		<tags>
		  <tag><lit-tag v="V"/></tag>
		</tags>
		<lu>
		  <clip pos="1" side="tl" part="lemh"/>
		  <clip pos="1" side="tl" part="a_adv"/>
		</lu>
	      </chunk>
	    </out>
	  </otherwise>
	</choose>
      </action>
    </rule>

    <!-- Added by Hrvoje -->
    <rule comment="verb">
      <pattern>
    	<pattern-item n="verb"/>
      </pattern>
      <action>
    	<call-macro n="verb_adapter"><with-param pos="1"/></call-macro>
    	<out>
    	  <chunk name="verb" case="caseFirstWord">
    	    <tags>
    	      <tag><lit-tag v="VB"/></tag>
    	    </tags>
    	    <lu>
    	      <clip pos="1" side="tl" part="whole"/>
    	    </lu>
    	  </chunk>
    	</out>
      </action>
    </rule>

    <rule comment="verb">
      <pattern>
    	<pattern-item n="future"/>
    	<pattern-item n="vb_lp"/>
      </pattern>
      <action>
    	<call-macro n="verb_adapter"><with-param pos="1"/></call-macro>
    	<call-macro n="verb_adapter"><with-param pos="2"/></call-macro>
    	<call-macro n="to_infinitive"><with-param pos="2"/></call-macro>
    	<out>
    	  <chunk name="verb" case="caseFirstWord">
    	    <tags>
    	      <tag><lit-tag v="VB"/></tag>
    	    </tags>
    	    <lu>
    	      <clip pos="1" side="tl" part="whole"/>
    	    </lu>
	    <b/>
    	    <lu>
    	      <clip pos="2" side="tl" part="whole"/>
    	    </lu>
    	  </chunk>
    	</out>
      </action>
    </rule>

    <rule comment="adj">
      <pattern>
	<pattern-item n="adj"/>
      </pattern>
      <action>
	<call-macro n="adj_adapter"><with-param pos="1"/></call-macro>
	<out>
	  <chunk name="adj" case="caseFirstWord">
	    <tags>
	      <tag><lit-tag v="A"/></tag>
	    </tags>
	    <lu>
	      <clip pos="1" side="tl" part="whole"/>
	    </lu>
	  </chunk>
	</out>
      </action>
    </rule>

    <rule comment="prn">
      <pattern>
	<pattern-item n="prns"/>
      </pattern>
      <action>
	<call-macro n="prn_adapter"><with-param pos="1"/></call-macro>
	<out>
	  <chunk name="prn" case="caseFirstWord">
	    <tags>
	      <tag><lit-tag v="Prn"/></tag>
	    </tags>
	    <lu>
	      <clip pos="1" side="tl" part="whole"/>
	    </lu>
	  </chunk>
	</out>
      </action>
    </rule>

  </section-rules>

</transfer>
